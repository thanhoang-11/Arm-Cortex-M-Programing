
010_falut_exception_generate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013b0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08001540  08001540  00002540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016c4  080016c4  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  080016c4  080016c4  000026c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080016cc  080016cc  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016cc  080016cc  000026cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080016d0  080016d0  000026d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080016d4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a1a  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003be  00000000  00000000  00003aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000150  00000000  00000000  00003e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000e9  00000000  00000000  00003fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002cd0  00000000  00000000  000040a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000155c  00000000  00000000  00006d71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009882  00000000  00000000  000082cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00011b4f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c10  00000000  00000000  00011b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  000127a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001528 	.word	0x08001528

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08001528 	.word	0x08001528

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <fun_divide>:
#include<stdio.h>

void UsageFault_Handler_c(uint32_t *pMSP);

int fun_divide(int x , int y)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]

	return x/y;
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8000282:	4618      	mov	r0, r3
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
	...

08000290 <display>:
void display(void){
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	printf("Hoang dep trai\n");
 8000294:	4803      	ldr	r0, [pc, #12]	@ (80002a4 <display+0x14>)
 8000296:	f000 fae3 	bl	8000860 <puts>
	printf("Hoang thong minh\n");
 800029a:	4803      	ldr	r0, [pc, #12]	@ (80002a8 <display+0x18>)
 800029c:	f000 fae0 	bl	8000860 <puts>
}
 80002a0:	bf00      	nop
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	08001540 	.word	0x08001540
 80002a8:	08001550 	.word	0x08001550

080002ac <main>:

int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
	//1. enable all configurable exceptions like usage fault, mem manage fault and bus fault

	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 80002b2:	4b13      	ldr	r3, [pc, #76]	@ (8000300 <main+0x54>)
 80002b4:	607b      	str	r3, [r7, #4]

	*pSHCSR |= ( 1 << 16); //mem manage
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 17); //bus fault
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 18); //usage fault
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	601a      	str	r2, [r3, #0]

	//2. enable divide by zero trap
	uint32_t *pCCR = (uint32_t*)0xE000ED14;
 80002da:	4b0a      	ldr	r3, [pc, #40]	@ (8000304 <main+0x58>)
 80002dc:	603b      	str	r3, [r7, #0]
	*pCCR |= ( 1 << 4);
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f043 0210 	orr.w	r2, r3, #16
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	601a      	str	r2, [r3, #0]

	//test
	display();
 80002ea:	f7ff ffd1 	bl	8000290 <display>
	printf("Hello\n");
 80002ee:	4806      	ldr	r0, [pc, #24]	@ (8000308 <main+0x5c>)
 80002f0:	f000 fab6 	bl	8000860 <puts>
    //3. attempt to divide by zero
	fun_divide(10,0);
 80002f4:	2100      	movs	r1, #0
 80002f6:	200a      	movs	r0, #10
 80002f8:	f7ff ffba 	bl	8000270 <fun_divide>

	for(;;);
 80002fc:	bf00      	nop
 80002fe:	e7fd      	b.n	80002fc <main+0x50>
 8000300:	e000ed24 	.word	0xe000ed24
 8000304:	e000ed14 	.word	0xe000ed14
 8000308:	08001564 	.word	0x08001564

0800030c <HardFault_Handler>:
}

//2. implement the fault handlers
void HardFault_Handler(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	printf("Exception : Hardfault\n");
 8000310:	4802      	ldr	r0, [pc, #8]	@ (800031c <HardFault_Handler+0x10>)
 8000312:	f000 faa5 	bl	8000860 <puts>
	while(1);
 8000316:	bf00      	nop
 8000318:	e7fd      	b.n	8000316 <HardFault_Handler+0xa>
 800031a:	bf00      	nop
 800031c:	0800156c 	.word	0x0800156c

08000320 <MemManage_Handler>:
}


void MemManage_Handler(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 8000324:	4802      	ldr	r0, [pc, #8]	@ (8000330 <MemManage_Handler+0x10>)
 8000326:	f000 fa9b 	bl	8000860 <puts>
	while(1);
 800032a:	bf00      	nop
 800032c:	e7fd      	b.n	800032a <MemManage_Handler+0xa>
 800032e:	bf00      	nop
 8000330:	08001584 	.word	0x08001584

08000334 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 8000338:	4802      	ldr	r0, [pc, #8]	@ (8000344 <BusFault_Handler+0x10>)
 800033a:	f000 fa91 	bl	8000860 <puts>
	while(1);
 800033e:	bf00      	nop
 8000340:	e7fd      	b.n	800033e <BusFault_Handler+0xa>
 8000342:	bf00      	nop
 8000344:	0800159c 	.word	0x0800159c

08000348 <UsageFault_Handler>:
__attribute__ ((naked)) void UsageFault_Handler(void)
{
	//here we extracted the value of MSP which happens to be the
	//base address of the stack frame(thread mode) which got saved during the exception entry
	//from thread mode to handler mode
	__asm ("MRS r0,MSP");
 8000348:	f3ef 8008 	mrs	r0, MSP
	__asm ("B UsageFault_Handler_c");
 800034c:	f000 b802 	b.w	8000354 <UsageFault_Handler_c>
}
 8000350:	bf00      	nop
	...

08000354 <UsageFault_Handler_c>:

void UsageFault_Handler_c(uint32_t *pBaseStackFrame)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	uint32_t *pUFSR = (uint32_t*)0xE000ED2A;
 800035c:	4b24      	ldr	r3, [pc, #144]	@ (80003f0 <UsageFault_Handler_c+0x9c>)
 800035e:	60fb      	str	r3, [r7, #12]
	printf("Exception : UsageFault\n");
 8000360:	4824      	ldr	r0, [pc, #144]	@ (80003f4 <UsageFault_Handler_c+0xa0>)
 8000362:	f000 fa7d 	bl	8000860 <puts>
	printf("UFSR = %lx\n",(*pUFSR) & 0xFFFF);
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	b29b      	uxth	r3, r3
 800036c:	4619      	mov	r1, r3
 800036e:	4822      	ldr	r0, [pc, #136]	@ (80003f8 <UsageFault_Handler_c+0xa4>)
 8000370:	f000 fa0e 	bl	8000790 <iprintf>
	printf("pBaseStackFrame = %p\n",pBaseStackFrame);
 8000374:	6879      	ldr	r1, [r7, #4]
 8000376:	4821      	ldr	r0, [pc, #132]	@ (80003fc <UsageFault_Handler_c+0xa8>)
 8000378:	f000 fa0a 	bl	8000790 <iprintf>
	printf("Value of R0 = %lx\n", pBaseStackFrame[0]);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4619      	mov	r1, r3
 8000382:	481f      	ldr	r0, [pc, #124]	@ (8000400 <UsageFault_Handler_c+0xac>)
 8000384:	f000 fa04 	bl	8000790 <iprintf>
	printf("Value of R1 = %lx\n", pBaseStackFrame[1]);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	3304      	adds	r3, #4
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4619      	mov	r1, r3
 8000390:	481c      	ldr	r0, [pc, #112]	@ (8000404 <UsageFault_Handler_c+0xb0>)
 8000392:	f000 f9fd 	bl	8000790 <iprintf>
	printf("Value of R2 = %lx\n", pBaseStackFrame[2]);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	3308      	adds	r3, #8
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4619      	mov	r1, r3
 800039e:	481a      	ldr	r0, [pc, #104]	@ (8000408 <UsageFault_Handler_c+0xb4>)
 80003a0:	f000 f9f6 	bl	8000790 <iprintf>
	printf("Value of R3 = %lx\n", pBaseStackFrame[3]);
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	330c      	adds	r3, #12
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4619      	mov	r1, r3
 80003ac:	4817      	ldr	r0, [pc, #92]	@ (800040c <UsageFault_Handler_c+0xb8>)
 80003ae:	f000 f9ef 	bl	8000790 <iprintf>
	printf("Value of R12 = %lx\n", pBaseStackFrame[4]);
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	3310      	adds	r3, #16
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4619      	mov	r1, r3
 80003ba:	4815      	ldr	r0, [pc, #84]	@ (8000410 <UsageFault_Handler_c+0xbc>)
 80003bc:	f000 f9e8 	bl	8000790 <iprintf>
	printf("Value of LR = %lx\n", pBaseStackFrame[5]);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3314      	adds	r3, #20
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4619      	mov	r1, r3
 80003c8:	4812      	ldr	r0, [pc, #72]	@ (8000414 <UsageFault_Handler_c+0xc0>)
 80003ca:	f000 f9e1 	bl	8000790 <iprintf>
	printf("Value of PC = %lx\n", pBaseStackFrame[6]);
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	3318      	adds	r3, #24
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4619      	mov	r1, r3
 80003d6:	4810      	ldr	r0, [pc, #64]	@ (8000418 <UsageFault_Handler_c+0xc4>)
 80003d8:	f000 f9da 	bl	8000790 <iprintf>
	printf("Value of XPSR = %lx\n", pBaseStackFrame[7]);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	331c      	adds	r3, #28
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4619      	mov	r1, r3
 80003e4:	480d      	ldr	r0, [pc, #52]	@ (800041c <UsageFault_Handler_c+0xc8>)
 80003e6:	f000 f9d3 	bl	8000790 <iprintf>
	while(1);
 80003ea:	bf00      	nop
 80003ec:	e7fd      	b.n	80003ea <UsageFault_Handler_c+0x96>
 80003ee:	bf00      	nop
 80003f0:	e000ed2a 	.word	0xe000ed2a
 80003f4:	080015b4 	.word	0x080015b4
 80003f8:	080015cc 	.word	0x080015cc
 80003fc:	080015d8 	.word	0x080015d8
 8000400:	080015f0 	.word	0x080015f0
 8000404:	08001604 	.word	0x08001604
 8000408:	08001618 	.word	0x08001618
 800040c:	0800162c 	.word	0x0800162c
 8000410:	08001640 	.word	0x08001640
 8000414:	08001654 	.word	0x08001654
 8000418:	08001668 	.word	0x08001668
 800041c:	0800167c 	.word	0x0800167c

08000420 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800042a:	4b0f      	ldr	r3, [pc, #60]	@ (8000468 <ITM_SendChar+0x48>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a0e      	ldr	r2, [pc, #56]	@ (8000468 <ITM_SendChar+0x48>)
 8000430:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000434:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000436:	4b0d      	ldr	r3, [pc, #52]	@ (800046c <ITM_SendChar+0x4c>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a0c      	ldr	r2, [pc, #48]	@ (800046c <ITM_SendChar+0x4c>)
 800043c:	f043 0301 	orr.w	r3, r3, #1
 8000440:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000442:	bf00      	nop
 8000444:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	2b00      	cmp	r3, #0
 8000450:	d0f8      	beq.n	8000444 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000452:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	6013      	str	r3, [r2, #0]
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	e000edfc 	.word	0xe000edfc
 800046c:	e0000e00 	.word	0xe0000e00

08000470 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b086      	sub	sp, #24
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800047c:	2300      	movs	r3, #0
 800047e:	617b      	str	r3, [r7, #20]
 8000480:	e00a      	b.n	8000498 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000482:	f3af 8000 	nop.w
 8000486:	4601      	mov	r1, r0
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	1c5a      	adds	r2, r3, #1
 800048c:	60ba      	str	r2, [r7, #8]
 800048e:	b2ca      	uxtb	r2, r1
 8000490:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000492:	697b      	ldr	r3, [r7, #20]
 8000494:	3301      	adds	r3, #1
 8000496:	617b      	str	r3, [r7, #20]
 8000498:	697a      	ldr	r2, [r7, #20]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	429a      	cmp	r2, r3
 800049e:	dbf0      	blt.n	8000482 <_read+0x12>
	}

return len;
 80004a0:	687b      	ldr	r3, [r7, #4]
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3718      	adds	r7, #24
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b086      	sub	sp, #24
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	60f8      	str	r0, [r7, #12]
 80004b2:	60b9      	str	r1, [r7, #8]
 80004b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
 80004ba:	e009      	b.n	80004d0 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	1c5a      	adds	r2, r3, #1
 80004c0:	60ba      	str	r2, [r7, #8]
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff ffab 	bl	8000420 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	3301      	adds	r3, #1
 80004ce:	617b      	str	r3, [r7, #20]
 80004d0:	697a      	ldr	r2, [r7, #20]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	dbf1      	blt.n	80004bc <_write+0x12>
	}
	return len;
 80004d8:	687b      	ldr	r3, [r7, #4]
}
 80004da:	4618      	mov	r0, r3
 80004dc:	3718      	adds	r7, #24
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <_close>:

int _close(int file)
{
 80004e2:	b480      	push	{r7}
 80004e4:	b083      	sub	sp, #12
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
	return -1;
 80004ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004fa:	b480      	push	{r7}
 80004fc:	b083      	sub	sp, #12
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
 8000502:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800050a:	605a      	str	r2, [r3, #4]
	return 0;
 800050c:	2300      	movs	r3, #0
}
 800050e:	4618      	mov	r0, r3
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr

0800051a <_isatty>:

int _isatty(int file)
{
 800051a:	b480      	push	{r7}
 800051c:	b083      	sub	sp, #12
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
	return 1;
 8000522:	2301      	movs	r3, #1
}
 8000524:	4618      	mov	r0, r3
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
	return 0;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
	...

0800054c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000554:	4a14      	ldr	r2, [pc, #80]	@ (80005a8 <_sbrk+0x5c>)
 8000556:	4b15      	ldr	r3, [pc, #84]	@ (80005ac <_sbrk+0x60>)
 8000558:	1ad3      	subs	r3, r2, r3
 800055a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000560:	4b13      	ldr	r3, [pc, #76]	@ (80005b0 <_sbrk+0x64>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d102      	bne.n	800056e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000568:	4b11      	ldr	r3, [pc, #68]	@ (80005b0 <_sbrk+0x64>)
 800056a:	4a12      	ldr	r2, [pc, #72]	@ (80005b4 <_sbrk+0x68>)
 800056c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800056e:	4b10      	ldr	r3, [pc, #64]	@ (80005b0 <_sbrk+0x64>)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4413      	add	r3, r2
 8000576:	693a      	ldr	r2, [r7, #16]
 8000578:	429a      	cmp	r2, r3
 800057a:	d207      	bcs.n	800058c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800057c:	f000 fa9e 	bl	8000abc <__errno>
 8000580:	4603      	mov	r3, r0
 8000582:	220c      	movs	r2, #12
 8000584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000586:	f04f 33ff 	mov.w	r3, #4294967295
 800058a:	e009      	b.n	80005a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800058c:	4b08      	ldr	r3, [pc, #32]	@ (80005b0 <_sbrk+0x64>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000592:	4b07      	ldr	r3, [pc, #28]	@ (80005b0 <_sbrk+0x64>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4413      	add	r3, r2
 800059a:	4a05      	ldr	r2, [pc, #20]	@ (80005b0 <_sbrk+0x64>)
 800059c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800059e:	68fb      	ldr	r3, [r7, #12]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3718      	adds	r7, #24
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20020000 	.word	0x20020000
 80005ac:	00000400 	.word	0x00000400
 80005b0:	20000078 	.word	0x20000078
 80005b4:	200001c8 	.word	0x200001c8

080005b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005b8:	480d      	ldr	r0, [pc, #52]	@ (80005f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c0:	480c      	ldr	r0, [pc, #48]	@ (80005f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80005c2:	490d      	ldr	r1, [pc, #52]	@ (80005f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c4:	4a0d      	ldr	r2, [pc, #52]	@ (80005fc <LoopForever+0xe>)
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c8:	e002      	b.n	80005d0 <LoopCopyDataInit>

080005ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ce:	3304      	adds	r3, #4

080005d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d4:	d3f9      	bcc.n	80005ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000600 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000604 <LoopForever+0x16>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005dc:	e001      	b.n	80005e2 <LoopFillZerobss>

080005de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e0:	3204      	adds	r2, #4

080005e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e4:	d3fb      	bcc.n	80005de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005e6:	f000 fa6f 	bl	8000ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ea:	f7ff fe5f 	bl	80002ac <main>

080005ee <LoopForever>:

LoopForever:
  b LoopForever
 80005ee:	e7fe      	b.n	80005ee <LoopForever>
  ldr   r0, =_estack
 80005f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005fc:	080016d4 	.word	0x080016d4
  ldr r2, =_sbss
 8000600:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000604:	200001c8 	.word	0x200001c8

08000608 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000608:	e7fe      	b.n	8000608 <ADC_IRQHandler>
	...

0800060c <std>:
 800060c:	2300      	movs	r3, #0
 800060e:	b510      	push	{r4, lr}
 8000610:	4604      	mov	r4, r0
 8000612:	e9c0 3300 	strd	r3, r3, [r0]
 8000616:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800061a:	6083      	str	r3, [r0, #8]
 800061c:	8181      	strh	r1, [r0, #12]
 800061e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000620:	81c2      	strh	r2, [r0, #14]
 8000622:	6183      	str	r3, [r0, #24]
 8000624:	4619      	mov	r1, r3
 8000626:	2208      	movs	r2, #8
 8000628:	305c      	adds	r0, #92	@ 0x5c
 800062a:	f000 f9f9 	bl	8000a20 <memset>
 800062e:	4b0d      	ldr	r3, [pc, #52]	@ (8000664 <std+0x58>)
 8000630:	6263      	str	r3, [r4, #36]	@ 0x24
 8000632:	4b0d      	ldr	r3, [pc, #52]	@ (8000668 <std+0x5c>)
 8000634:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000636:	4b0d      	ldr	r3, [pc, #52]	@ (800066c <std+0x60>)
 8000638:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800063a:	4b0d      	ldr	r3, [pc, #52]	@ (8000670 <std+0x64>)
 800063c:	6323      	str	r3, [r4, #48]	@ 0x30
 800063e:	4b0d      	ldr	r3, [pc, #52]	@ (8000674 <std+0x68>)
 8000640:	6224      	str	r4, [r4, #32]
 8000642:	429c      	cmp	r4, r3
 8000644:	d006      	beq.n	8000654 <std+0x48>
 8000646:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800064a:	4294      	cmp	r4, r2
 800064c:	d002      	beq.n	8000654 <std+0x48>
 800064e:	33d0      	adds	r3, #208	@ 0xd0
 8000650:	429c      	cmp	r4, r3
 8000652:	d105      	bne.n	8000660 <std+0x54>
 8000654:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800065c:	f000 ba58 	b.w	8000b10 <__retarget_lock_init_recursive>
 8000660:	bd10      	pop	{r4, pc}
 8000662:	bf00      	nop
 8000664:	08000871 	.word	0x08000871
 8000668:	08000893 	.word	0x08000893
 800066c:	080008cb 	.word	0x080008cb
 8000670:	080008ef 	.word	0x080008ef
 8000674:	2000007c 	.word	0x2000007c

08000678 <stdio_exit_handler>:
 8000678:	4a02      	ldr	r2, [pc, #8]	@ (8000684 <stdio_exit_handler+0xc>)
 800067a:	4903      	ldr	r1, [pc, #12]	@ (8000688 <stdio_exit_handler+0x10>)
 800067c:	4803      	ldr	r0, [pc, #12]	@ (800068c <stdio_exit_handler+0x14>)
 800067e:	f000 b869 	b.w	8000754 <_fwalk_sglue>
 8000682:	bf00      	nop
 8000684:	20000000 	.word	0x20000000
 8000688:	080013b1 	.word	0x080013b1
 800068c:	20000010 	.word	0x20000010

08000690 <cleanup_stdio>:
 8000690:	6841      	ldr	r1, [r0, #4]
 8000692:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <cleanup_stdio+0x34>)
 8000694:	4299      	cmp	r1, r3
 8000696:	b510      	push	{r4, lr}
 8000698:	4604      	mov	r4, r0
 800069a:	d001      	beq.n	80006a0 <cleanup_stdio+0x10>
 800069c:	f000 fe88 	bl	80013b0 <_fflush_r>
 80006a0:	68a1      	ldr	r1, [r4, #8]
 80006a2:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <cleanup_stdio+0x38>)
 80006a4:	4299      	cmp	r1, r3
 80006a6:	d002      	beq.n	80006ae <cleanup_stdio+0x1e>
 80006a8:	4620      	mov	r0, r4
 80006aa:	f000 fe81 	bl	80013b0 <_fflush_r>
 80006ae:	68e1      	ldr	r1, [r4, #12]
 80006b0:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <cleanup_stdio+0x3c>)
 80006b2:	4299      	cmp	r1, r3
 80006b4:	d004      	beq.n	80006c0 <cleanup_stdio+0x30>
 80006b6:	4620      	mov	r0, r4
 80006b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006bc:	f000 be78 	b.w	80013b0 <_fflush_r>
 80006c0:	bd10      	pop	{r4, pc}
 80006c2:	bf00      	nop
 80006c4:	2000007c 	.word	0x2000007c
 80006c8:	200000e4 	.word	0x200000e4
 80006cc:	2000014c 	.word	0x2000014c

080006d0 <global_stdio_init.part.0>:
 80006d0:	b510      	push	{r4, lr}
 80006d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000700 <global_stdio_init.part.0+0x30>)
 80006d4:	4c0b      	ldr	r4, [pc, #44]	@ (8000704 <global_stdio_init.part.0+0x34>)
 80006d6:	4a0c      	ldr	r2, [pc, #48]	@ (8000708 <global_stdio_init.part.0+0x38>)
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	4620      	mov	r0, r4
 80006dc:	2200      	movs	r2, #0
 80006de:	2104      	movs	r1, #4
 80006e0:	f7ff ff94 	bl	800060c <std>
 80006e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80006e8:	2201      	movs	r2, #1
 80006ea:	2109      	movs	r1, #9
 80006ec:	f7ff ff8e 	bl	800060c <std>
 80006f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80006f4:	2202      	movs	r2, #2
 80006f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006fa:	2112      	movs	r1, #18
 80006fc:	f7ff bf86 	b.w	800060c <std>
 8000700:	200001b4 	.word	0x200001b4
 8000704:	2000007c 	.word	0x2000007c
 8000708:	08000679 	.word	0x08000679

0800070c <__sfp_lock_acquire>:
 800070c:	4801      	ldr	r0, [pc, #4]	@ (8000714 <__sfp_lock_acquire+0x8>)
 800070e:	f000 ba00 	b.w	8000b12 <__retarget_lock_acquire_recursive>
 8000712:	bf00      	nop
 8000714:	200001bd 	.word	0x200001bd

08000718 <__sfp_lock_release>:
 8000718:	4801      	ldr	r0, [pc, #4]	@ (8000720 <__sfp_lock_release+0x8>)
 800071a:	f000 b9fb 	b.w	8000b14 <__retarget_lock_release_recursive>
 800071e:	bf00      	nop
 8000720:	200001bd 	.word	0x200001bd

08000724 <__sinit>:
 8000724:	b510      	push	{r4, lr}
 8000726:	4604      	mov	r4, r0
 8000728:	f7ff fff0 	bl	800070c <__sfp_lock_acquire>
 800072c:	6a23      	ldr	r3, [r4, #32]
 800072e:	b11b      	cbz	r3, 8000738 <__sinit+0x14>
 8000730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000734:	f7ff bff0 	b.w	8000718 <__sfp_lock_release>
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <__sinit+0x28>)
 800073a:	6223      	str	r3, [r4, #32]
 800073c:	4b04      	ldr	r3, [pc, #16]	@ (8000750 <__sinit+0x2c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1f5      	bne.n	8000730 <__sinit+0xc>
 8000744:	f7ff ffc4 	bl	80006d0 <global_stdio_init.part.0>
 8000748:	e7f2      	b.n	8000730 <__sinit+0xc>
 800074a:	bf00      	nop
 800074c:	08000691 	.word	0x08000691
 8000750:	200001b4 	.word	0x200001b4

08000754 <_fwalk_sglue>:
 8000754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000758:	4607      	mov	r7, r0
 800075a:	4688      	mov	r8, r1
 800075c:	4614      	mov	r4, r2
 800075e:	2600      	movs	r6, #0
 8000760:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000764:	f1b9 0901 	subs.w	r9, r9, #1
 8000768:	d505      	bpl.n	8000776 <_fwalk_sglue+0x22>
 800076a:	6824      	ldr	r4, [r4, #0]
 800076c:	2c00      	cmp	r4, #0
 800076e:	d1f7      	bne.n	8000760 <_fwalk_sglue+0xc>
 8000770:	4630      	mov	r0, r6
 8000772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000776:	89ab      	ldrh	r3, [r5, #12]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d907      	bls.n	800078c <_fwalk_sglue+0x38>
 800077c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000780:	3301      	adds	r3, #1
 8000782:	d003      	beq.n	800078c <_fwalk_sglue+0x38>
 8000784:	4629      	mov	r1, r5
 8000786:	4638      	mov	r0, r7
 8000788:	47c0      	blx	r8
 800078a:	4306      	orrs	r6, r0
 800078c:	3568      	adds	r5, #104	@ 0x68
 800078e:	e7e9      	b.n	8000764 <_fwalk_sglue+0x10>

08000790 <iprintf>:
 8000790:	b40f      	push	{r0, r1, r2, r3}
 8000792:	b507      	push	{r0, r1, r2, lr}
 8000794:	4906      	ldr	r1, [pc, #24]	@ (80007b0 <iprintf+0x20>)
 8000796:	ab04      	add	r3, sp, #16
 8000798:	6808      	ldr	r0, [r1, #0]
 800079a:	f853 2b04 	ldr.w	r2, [r3], #4
 800079e:	6881      	ldr	r1, [r0, #8]
 80007a0:	9301      	str	r3, [sp, #4]
 80007a2:	f000 fadb 	bl	8000d5c <_vfiprintf_r>
 80007a6:	b003      	add	sp, #12
 80007a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80007ac:	b004      	add	sp, #16
 80007ae:	4770      	bx	lr
 80007b0:	2000000c 	.word	0x2000000c

080007b4 <_puts_r>:
 80007b4:	6a03      	ldr	r3, [r0, #32]
 80007b6:	b570      	push	{r4, r5, r6, lr}
 80007b8:	6884      	ldr	r4, [r0, #8]
 80007ba:	4605      	mov	r5, r0
 80007bc:	460e      	mov	r6, r1
 80007be:	b90b      	cbnz	r3, 80007c4 <_puts_r+0x10>
 80007c0:	f7ff ffb0 	bl	8000724 <__sinit>
 80007c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80007c6:	07db      	lsls	r3, r3, #31
 80007c8:	d405      	bmi.n	80007d6 <_puts_r+0x22>
 80007ca:	89a3      	ldrh	r3, [r4, #12]
 80007cc:	0598      	lsls	r0, r3, #22
 80007ce:	d402      	bmi.n	80007d6 <_puts_r+0x22>
 80007d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80007d2:	f000 f99e 	bl	8000b12 <__retarget_lock_acquire_recursive>
 80007d6:	89a3      	ldrh	r3, [r4, #12]
 80007d8:	0719      	lsls	r1, r3, #28
 80007da:	d502      	bpl.n	80007e2 <_puts_r+0x2e>
 80007dc:	6923      	ldr	r3, [r4, #16]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d135      	bne.n	800084e <_puts_r+0x9a>
 80007e2:	4621      	mov	r1, r4
 80007e4:	4628      	mov	r0, r5
 80007e6:	f000 f8c5 	bl	8000974 <__swsetup_r>
 80007ea:	b380      	cbz	r0, 800084e <_puts_r+0x9a>
 80007ec:	f04f 35ff 	mov.w	r5, #4294967295
 80007f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80007f2:	07da      	lsls	r2, r3, #31
 80007f4:	d405      	bmi.n	8000802 <_puts_r+0x4e>
 80007f6:	89a3      	ldrh	r3, [r4, #12]
 80007f8:	059b      	lsls	r3, r3, #22
 80007fa:	d402      	bmi.n	8000802 <_puts_r+0x4e>
 80007fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80007fe:	f000 f989 	bl	8000b14 <__retarget_lock_release_recursive>
 8000802:	4628      	mov	r0, r5
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	2b00      	cmp	r3, #0
 8000808:	da04      	bge.n	8000814 <_puts_r+0x60>
 800080a:	69a2      	ldr	r2, [r4, #24]
 800080c:	429a      	cmp	r2, r3
 800080e:	dc17      	bgt.n	8000840 <_puts_r+0x8c>
 8000810:	290a      	cmp	r1, #10
 8000812:	d015      	beq.n	8000840 <_puts_r+0x8c>
 8000814:	6823      	ldr	r3, [r4, #0]
 8000816:	1c5a      	adds	r2, r3, #1
 8000818:	6022      	str	r2, [r4, #0]
 800081a:	7019      	strb	r1, [r3, #0]
 800081c:	68a3      	ldr	r3, [r4, #8]
 800081e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000822:	3b01      	subs	r3, #1
 8000824:	60a3      	str	r3, [r4, #8]
 8000826:	2900      	cmp	r1, #0
 8000828:	d1ed      	bne.n	8000806 <_puts_r+0x52>
 800082a:	2b00      	cmp	r3, #0
 800082c:	da11      	bge.n	8000852 <_puts_r+0x9e>
 800082e:	4622      	mov	r2, r4
 8000830:	210a      	movs	r1, #10
 8000832:	4628      	mov	r0, r5
 8000834:	f000 f85f 	bl	80008f6 <__swbuf_r>
 8000838:	3001      	adds	r0, #1
 800083a:	d0d7      	beq.n	80007ec <_puts_r+0x38>
 800083c:	250a      	movs	r5, #10
 800083e:	e7d7      	b.n	80007f0 <_puts_r+0x3c>
 8000840:	4622      	mov	r2, r4
 8000842:	4628      	mov	r0, r5
 8000844:	f000 f857 	bl	80008f6 <__swbuf_r>
 8000848:	3001      	adds	r0, #1
 800084a:	d1e7      	bne.n	800081c <_puts_r+0x68>
 800084c:	e7ce      	b.n	80007ec <_puts_r+0x38>
 800084e:	3e01      	subs	r6, #1
 8000850:	e7e4      	b.n	800081c <_puts_r+0x68>
 8000852:	6823      	ldr	r3, [r4, #0]
 8000854:	1c5a      	adds	r2, r3, #1
 8000856:	6022      	str	r2, [r4, #0]
 8000858:	220a      	movs	r2, #10
 800085a:	701a      	strb	r2, [r3, #0]
 800085c:	e7ee      	b.n	800083c <_puts_r+0x88>
	...

08000860 <puts>:
 8000860:	4b02      	ldr	r3, [pc, #8]	@ (800086c <puts+0xc>)
 8000862:	4601      	mov	r1, r0
 8000864:	6818      	ldr	r0, [r3, #0]
 8000866:	f7ff bfa5 	b.w	80007b4 <_puts_r>
 800086a:	bf00      	nop
 800086c:	2000000c 	.word	0x2000000c

08000870 <__sread>:
 8000870:	b510      	push	{r4, lr}
 8000872:	460c      	mov	r4, r1
 8000874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000878:	f000 f8fc 	bl	8000a74 <_read_r>
 800087c:	2800      	cmp	r0, #0
 800087e:	bfab      	itete	ge
 8000880:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000882:	89a3      	ldrhlt	r3, [r4, #12]
 8000884:	181b      	addge	r3, r3, r0
 8000886:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800088a:	bfac      	ite	ge
 800088c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800088e:	81a3      	strhlt	r3, [r4, #12]
 8000890:	bd10      	pop	{r4, pc}

08000892 <__swrite>:
 8000892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000896:	461f      	mov	r7, r3
 8000898:	898b      	ldrh	r3, [r1, #12]
 800089a:	05db      	lsls	r3, r3, #23
 800089c:	4605      	mov	r5, r0
 800089e:	460c      	mov	r4, r1
 80008a0:	4616      	mov	r6, r2
 80008a2:	d505      	bpl.n	80008b0 <__swrite+0x1e>
 80008a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008a8:	2302      	movs	r3, #2
 80008aa:	2200      	movs	r2, #0
 80008ac:	f000 f8d0 	bl	8000a50 <_lseek_r>
 80008b0:	89a3      	ldrh	r3, [r4, #12]
 80008b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008ba:	81a3      	strh	r3, [r4, #12]
 80008bc:	4632      	mov	r2, r6
 80008be:	463b      	mov	r3, r7
 80008c0:	4628      	mov	r0, r5
 80008c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008c6:	f000 b8e7 	b.w	8000a98 <_write_r>

080008ca <__sseek>:
 80008ca:	b510      	push	{r4, lr}
 80008cc:	460c      	mov	r4, r1
 80008ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008d2:	f000 f8bd 	bl	8000a50 <_lseek_r>
 80008d6:	1c43      	adds	r3, r0, #1
 80008d8:	89a3      	ldrh	r3, [r4, #12]
 80008da:	bf15      	itete	ne
 80008dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80008de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80008e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80008e6:	81a3      	strheq	r3, [r4, #12]
 80008e8:	bf18      	it	ne
 80008ea:	81a3      	strhne	r3, [r4, #12]
 80008ec:	bd10      	pop	{r4, pc}

080008ee <__sclose>:
 80008ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008f2:	f000 b89d 	b.w	8000a30 <_close_r>

080008f6 <__swbuf_r>:
 80008f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008f8:	460e      	mov	r6, r1
 80008fa:	4614      	mov	r4, r2
 80008fc:	4605      	mov	r5, r0
 80008fe:	b118      	cbz	r0, 8000908 <__swbuf_r+0x12>
 8000900:	6a03      	ldr	r3, [r0, #32]
 8000902:	b90b      	cbnz	r3, 8000908 <__swbuf_r+0x12>
 8000904:	f7ff ff0e 	bl	8000724 <__sinit>
 8000908:	69a3      	ldr	r3, [r4, #24]
 800090a:	60a3      	str	r3, [r4, #8]
 800090c:	89a3      	ldrh	r3, [r4, #12]
 800090e:	071a      	lsls	r2, r3, #28
 8000910:	d501      	bpl.n	8000916 <__swbuf_r+0x20>
 8000912:	6923      	ldr	r3, [r4, #16]
 8000914:	b943      	cbnz	r3, 8000928 <__swbuf_r+0x32>
 8000916:	4621      	mov	r1, r4
 8000918:	4628      	mov	r0, r5
 800091a:	f000 f82b 	bl	8000974 <__swsetup_r>
 800091e:	b118      	cbz	r0, 8000928 <__swbuf_r+0x32>
 8000920:	f04f 37ff 	mov.w	r7, #4294967295
 8000924:	4638      	mov	r0, r7
 8000926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000928:	6823      	ldr	r3, [r4, #0]
 800092a:	6922      	ldr	r2, [r4, #16]
 800092c:	1a98      	subs	r0, r3, r2
 800092e:	6963      	ldr	r3, [r4, #20]
 8000930:	b2f6      	uxtb	r6, r6
 8000932:	4283      	cmp	r3, r0
 8000934:	4637      	mov	r7, r6
 8000936:	dc05      	bgt.n	8000944 <__swbuf_r+0x4e>
 8000938:	4621      	mov	r1, r4
 800093a:	4628      	mov	r0, r5
 800093c:	f000 fd38 	bl	80013b0 <_fflush_r>
 8000940:	2800      	cmp	r0, #0
 8000942:	d1ed      	bne.n	8000920 <__swbuf_r+0x2a>
 8000944:	68a3      	ldr	r3, [r4, #8]
 8000946:	3b01      	subs	r3, #1
 8000948:	60a3      	str	r3, [r4, #8]
 800094a:	6823      	ldr	r3, [r4, #0]
 800094c:	1c5a      	adds	r2, r3, #1
 800094e:	6022      	str	r2, [r4, #0]
 8000950:	701e      	strb	r6, [r3, #0]
 8000952:	6962      	ldr	r2, [r4, #20]
 8000954:	1c43      	adds	r3, r0, #1
 8000956:	429a      	cmp	r2, r3
 8000958:	d004      	beq.n	8000964 <__swbuf_r+0x6e>
 800095a:	89a3      	ldrh	r3, [r4, #12]
 800095c:	07db      	lsls	r3, r3, #31
 800095e:	d5e1      	bpl.n	8000924 <__swbuf_r+0x2e>
 8000960:	2e0a      	cmp	r6, #10
 8000962:	d1df      	bne.n	8000924 <__swbuf_r+0x2e>
 8000964:	4621      	mov	r1, r4
 8000966:	4628      	mov	r0, r5
 8000968:	f000 fd22 	bl	80013b0 <_fflush_r>
 800096c:	2800      	cmp	r0, #0
 800096e:	d0d9      	beq.n	8000924 <__swbuf_r+0x2e>
 8000970:	e7d6      	b.n	8000920 <__swbuf_r+0x2a>
	...

08000974 <__swsetup_r>:
 8000974:	b538      	push	{r3, r4, r5, lr}
 8000976:	4b29      	ldr	r3, [pc, #164]	@ (8000a1c <__swsetup_r+0xa8>)
 8000978:	4605      	mov	r5, r0
 800097a:	6818      	ldr	r0, [r3, #0]
 800097c:	460c      	mov	r4, r1
 800097e:	b118      	cbz	r0, 8000988 <__swsetup_r+0x14>
 8000980:	6a03      	ldr	r3, [r0, #32]
 8000982:	b90b      	cbnz	r3, 8000988 <__swsetup_r+0x14>
 8000984:	f7ff fece 	bl	8000724 <__sinit>
 8000988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800098c:	0719      	lsls	r1, r3, #28
 800098e:	d422      	bmi.n	80009d6 <__swsetup_r+0x62>
 8000990:	06da      	lsls	r2, r3, #27
 8000992:	d407      	bmi.n	80009a4 <__swsetup_r+0x30>
 8000994:	2209      	movs	r2, #9
 8000996:	602a      	str	r2, [r5, #0]
 8000998:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800099c:	81a3      	strh	r3, [r4, #12]
 800099e:	f04f 30ff 	mov.w	r0, #4294967295
 80009a2:	e033      	b.n	8000a0c <__swsetup_r+0x98>
 80009a4:	0758      	lsls	r0, r3, #29
 80009a6:	d512      	bpl.n	80009ce <__swsetup_r+0x5a>
 80009a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80009aa:	b141      	cbz	r1, 80009be <__swsetup_r+0x4a>
 80009ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80009b0:	4299      	cmp	r1, r3
 80009b2:	d002      	beq.n	80009ba <__swsetup_r+0x46>
 80009b4:	4628      	mov	r0, r5
 80009b6:	f000 f8af 	bl	8000b18 <_free_r>
 80009ba:	2300      	movs	r3, #0
 80009bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80009be:	89a3      	ldrh	r3, [r4, #12]
 80009c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80009c4:	81a3      	strh	r3, [r4, #12]
 80009c6:	2300      	movs	r3, #0
 80009c8:	6063      	str	r3, [r4, #4]
 80009ca:	6923      	ldr	r3, [r4, #16]
 80009cc:	6023      	str	r3, [r4, #0]
 80009ce:	89a3      	ldrh	r3, [r4, #12]
 80009d0:	f043 0308 	orr.w	r3, r3, #8
 80009d4:	81a3      	strh	r3, [r4, #12]
 80009d6:	6923      	ldr	r3, [r4, #16]
 80009d8:	b94b      	cbnz	r3, 80009ee <__swsetup_r+0x7a>
 80009da:	89a3      	ldrh	r3, [r4, #12]
 80009dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80009e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80009e4:	d003      	beq.n	80009ee <__swsetup_r+0x7a>
 80009e6:	4621      	mov	r1, r4
 80009e8:	4628      	mov	r0, r5
 80009ea:	f000 fd2f 	bl	800144c <__smakebuf_r>
 80009ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009f2:	f013 0201 	ands.w	r2, r3, #1
 80009f6:	d00a      	beq.n	8000a0e <__swsetup_r+0x9a>
 80009f8:	2200      	movs	r2, #0
 80009fa:	60a2      	str	r2, [r4, #8]
 80009fc:	6962      	ldr	r2, [r4, #20]
 80009fe:	4252      	negs	r2, r2
 8000a00:	61a2      	str	r2, [r4, #24]
 8000a02:	6922      	ldr	r2, [r4, #16]
 8000a04:	b942      	cbnz	r2, 8000a18 <__swsetup_r+0xa4>
 8000a06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000a0a:	d1c5      	bne.n	8000998 <__swsetup_r+0x24>
 8000a0c:	bd38      	pop	{r3, r4, r5, pc}
 8000a0e:	0799      	lsls	r1, r3, #30
 8000a10:	bf58      	it	pl
 8000a12:	6962      	ldrpl	r2, [r4, #20]
 8000a14:	60a2      	str	r2, [r4, #8]
 8000a16:	e7f4      	b.n	8000a02 <__swsetup_r+0x8e>
 8000a18:	2000      	movs	r0, #0
 8000a1a:	e7f7      	b.n	8000a0c <__swsetup_r+0x98>
 8000a1c:	2000000c 	.word	0x2000000c

08000a20 <memset>:
 8000a20:	4402      	add	r2, r0
 8000a22:	4603      	mov	r3, r0
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d100      	bne.n	8000a2a <memset+0xa>
 8000a28:	4770      	bx	lr
 8000a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8000a2e:	e7f9      	b.n	8000a24 <memset+0x4>

08000a30 <_close_r>:
 8000a30:	b538      	push	{r3, r4, r5, lr}
 8000a32:	4d06      	ldr	r5, [pc, #24]	@ (8000a4c <_close_r+0x1c>)
 8000a34:	2300      	movs	r3, #0
 8000a36:	4604      	mov	r4, r0
 8000a38:	4608      	mov	r0, r1
 8000a3a:	602b      	str	r3, [r5, #0]
 8000a3c:	f7ff fd51 	bl	80004e2 <_close>
 8000a40:	1c43      	adds	r3, r0, #1
 8000a42:	d102      	bne.n	8000a4a <_close_r+0x1a>
 8000a44:	682b      	ldr	r3, [r5, #0]
 8000a46:	b103      	cbz	r3, 8000a4a <_close_r+0x1a>
 8000a48:	6023      	str	r3, [r4, #0]
 8000a4a:	bd38      	pop	{r3, r4, r5, pc}
 8000a4c:	200001b8 	.word	0x200001b8

08000a50 <_lseek_r>:
 8000a50:	b538      	push	{r3, r4, r5, lr}
 8000a52:	4d07      	ldr	r5, [pc, #28]	@ (8000a70 <_lseek_r+0x20>)
 8000a54:	4604      	mov	r4, r0
 8000a56:	4608      	mov	r0, r1
 8000a58:	4611      	mov	r1, r2
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	602a      	str	r2, [r5, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	f7ff fd66 	bl	8000530 <_lseek>
 8000a64:	1c43      	adds	r3, r0, #1
 8000a66:	d102      	bne.n	8000a6e <_lseek_r+0x1e>
 8000a68:	682b      	ldr	r3, [r5, #0]
 8000a6a:	b103      	cbz	r3, 8000a6e <_lseek_r+0x1e>
 8000a6c:	6023      	str	r3, [r4, #0]
 8000a6e:	bd38      	pop	{r3, r4, r5, pc}
 8000a70:	200001b8 	.word	0x200001b8

08000a74 <_read_r>:
 8000a74:	b538      	push	{r3, r4, r5, lr}
 8000a76:	4d07      	ldr	r5, [pc, #28]	@ (8000a94 <_read_r+0x20>)
 8000a78:	4604      	mov	r4, r0
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	2200      	movs	r2, #0
 8000a80:	602a      	str	r2, [r5, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	f7ff fcf4 	bl	8000470 <_read>
 8000a88:	1c43      	adds	r3, r0, #1
 8000a8a:	d102      	bne.n	8000a92 <_read_r+0x1e>
 8000a8c:	682b      	ldr	r3, [r5, #0]
 8000a8e:	b103      	cbz	r3, 8000a92 <_read_r+0x1e>
 8000a90:	6023      	str	r3, [r4, #0]
 8000a92:	bd38      	pop	{r3, r4, r5, pc}
 8000a94:	200001b8 	.word	0x200001b8

08000a98 <_write_r>:
 8000a98:	b538      	push	{r3, r4, r5, lr}
 8000a9a:	4d07      	ldr	r5, [pc, #28]	@ (8000ab8 <_write_r+0x20>)
 8000a9c:	4604      	mov	r4, r0
 8000a9e:	4608      	mov	r0, r1
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	602a      	str	r2, [r5, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	f7ff fcff 	bl	80004aa <_write>
 8000aac:	1c43      	adds	r3, r0, #1
 8000aae:	d102      	bne.n	8000ab6 <_write_r+0x1e>
 8000ab0:	682b      	ldr	r3, [r5, #0]
 8000ab2:	b103      	cbz	r3, 8000ab6 <_write_r+0x1e>
 8000ab4:	6023      	str	r3, [r4, #0]
 8000ab6:	bd38      	pop	{r3, r4, r5, pc}
 8000ab8:	200001b8 	.word	0x200001b8

08000abc <__errno>:
 8000abc:	4b01      	ldr	r3, [pc, #4]	@ (8000ac4 <__errno+0x8>)
 8000abe:	6818      	ldr	r0, [r3, #0]
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	2000000c 	.word	0x2000000c

08000ac8 <__libc_init_array>:
 8000ac8:	b570      	push	{r4, r5, r6, lr}
 8000aca:	4d0d      	ldr	r5, [pc, #52]	@ (8000b00 <__libc_init_array+0x38>)
 8000acc:	4c0d      	ldr	r4, [pc, #52]	@ (8000b04 <__libc_init_array+0x3c>)
 8000ace:	1b64      	subs	r4, r4, r5
 8000ad0:	10a4      	asrs	r4, r4, #2
 8000ad2:	2600      	movs	r6, #0
 8000ad4:	42a6      	cmp	r6, r4
 8000ad6:	d109      	bne.n	8000aec <__libc_init_array+0x24>
 8000ad8:	4d0b      	ldr	r5, [pc, #44]	@ (8000b08 <__libc_init_array+0x40>)
 8000ada:	4c0c      	ldr	r4, [pc, #48]	@ (8000b0c <__libc_init_array+0x44>)
 8000adc:	f000 fd24 	bl	8001528 <_init>
 8000ae0:	1b64      	subs	r4, r4, r5
 8000ae2:	10a4      	asrs	r4, r4, #2
 8000ae4:	2600      	movs	r6, #0
 8000ae6:	42a6      	cmp	r6, r4
 8000ae8:	d105      	bne.n	8000af6 <__libc_init_array+0x2e>
 8000aea:	bd70      	pop	{r4, r5, r6, pc}
 8000aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8000af0:	4798      	blx	r3
 8000af2:	3601      	adds	r6, #1
 8000af4:	e7ee      	b.n	8000ad4 <__libc_init_array+0xc>
 8000af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000afa:	4798      	blx	r3
 8000afc:	3601      	adds	r6, #1
 8000afe:	e7f2      	b.n	8000ae6 <__libc_init_array+0x1e>
 8000b00:	080016cc 	.word	0x080016cc
 8000b04:	080016cc 	.word	0x080016cc
 8000b08:	080016cc 	.word	0x080016cc
 8000b0c:	080016d0 	.word	0x080016d0

08000b10 <__retarget_lock_init_recursive>:
 8000b10:	4770      	bx	lr

08000b12 <__retarget_lock_acquire_recursive>:
 8000b12:	4770      	bx	lr

08000b14 <__retarget_lock_release_recursive>:
 8000b14:	4770      	bx	lr
	...

08000b18 <_free_r>:
 8000b18:	b538      	push	{r3, r4, r5, lr}
 8000b1a:	4605      	mov	r5, r0
 8000b1c:	2900      	cmp	r1, #0
 8000b1e:	d041      	beq.n	8000ba4 <_free_r+0x8c>
 8000b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b24:	1f0c      	subs	r4, r1, #4
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	bfb8      	it	lt
 8000b2a:	18e4      	addlt	r4, r4, r3
 8000b2c:	f000 f8e0 	bl	8000cf0 <__malloc_lock>
 8000b30:	4a1d      	ldr	r2, [pc, #116]	@ (8000ba8 <_free_r+0x90>)
 8000b32:	6813      	ldr	r3, [r2, #0]
 8000b34:	b933      	cbnz	r3, 8000b44 <_free_r+0x2c>
 8000b36:	6063      	str	r3, [r4, #4]
 8000b38:	6014      	str	r4, [r2, #0]
 8000b3a:	4628      	mov	r0, r5
 8000b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b40:	f000 b8dc 	b.w	8000cfc <__malloc_unlock>
 8000b44:	42a3      	cmp	r3, r4
 8000b46:	d908      	bls.n	8000b5a <_free_r+0x42>
 8000b48:	6820      	ldr	r0, [r4, #0]
 8000b4a:	1821      	adds	r1, r4, r0
 8000b4c:	428b      	cmp	r3, r1
 8000b4e:	bf01      	itttt	eq
 8000b50:	6819      	ldreq	r1, [r3, #0]
 8000b52:	685b      	ldreq	r3, [r3, #4]
 8000b54:	1809      	addeq	r1, r1, r0
 8000b56:	6021      	streq	r1, [r4, #0]
 8000b58:	e7ed      	b.n	8000b36 <_free_r+0x1e>
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	b10b      	cbz	r3, 8000b64 <_free_r+0x4c>
 8000b60:	42a3      	cmp	r3, r4
 8000b62:	d9fa      	bls.n	8000b5a <_free_r+0x42>
 8000b64:	6811      	ldr	r1, [r2, #0]
 8000b66:	1850      	adds	r0, r2, r1
 8000b68:	42a0      	cmp	r0, r4
 8000b6a:	d10b      	bne.n	8000b84 <_free_r+0x6c>
 8000b6c:	6820      	ldr	r0, [r4, #0]
 8000b6e:	4401      	add	r1, r0
 8000b70:	1850      	adds	r0, r2, r1
 8000b72:	4283      	cmp	r3, r0
 8000b74:	6011      	str	r1, [r2, #0]
 8000b76:	d1e0      	bne.n	8000b3a <_free_r+0x22>
 8000b78:	6818      	ldr	r0, [r3, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	6053      	str	r3, [r2, #4]
 8000b7e:	4408      	add	r0, r1
 8000b80:	6010      	str	r0, [r2, #0]
 8000b82:	e7da      	b.n	8000b3a <_free_r+0x22>
 8000b84:	d902      	bls.n	8000b8c <_free_r+0x74>
 8000b86:	230c      	movs	r3, #12
 8000b88:	602b      	str	r3, [r5, #0]
 8000b8a:	e7d6      	b.n	8000b3a <_free_r+0x22>
 8000b8c:	6820      	ldr	r0, [r4, #0]
 8000b8e:	1821      	adds	r1, r4, r0
 8000b90:	428b      	cmp	r3, r1
 8000b92:	bf04      	itt	eq
 8000b94:	6819      	ldreq	r1, [r3, #0]
 8000b96:	685b      	ldreq	r3, [r3, #4]
 8000b98:	6063      	str	r3, [r4, #4]
 8000b9a:	bf04      	itt	eq
 8000b9c:	1809      	addeq	r1, r1, r0
 8000b9e:	6021      	streq	r1, [r4, #0]
 8000ba0:	6054      	str	r4, [r2, #4]
 8000ba2:	e7ca      	b.n	8000b3a <_free_r+0x22>
 8000ba4:	bd38      	pop	{r3, r4, r5, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200001c4 	.word	0x200001c4

08000bac <sbrk_aligned>:
 8000bac:	b570      	push	{r4, r5, r6, lr}
 8000bae:	4e0f      	ldr	r6, [pc, #60]	@ (8000bec <sbrk_aligned+0x40>)
 8000bb0:	460c      	mov	r4, r1
 8000bb2:	6831      	ldr	r1, [r6, #0]
 8000bb4:	4605      	mov	r5, r0
 8000bb6:	b911      	cbnz	r1, 8000bbe <sbrk_aligned+0x12>
 8000bb8:	f000 fca6 	bl	8001508 <_sbrk_r>
 8000bbc:	6030      	str	r0, [r6, #0]
 8000bbe:	4621      	mov	r1, r4
 8000bc0:	4628      	mov	r0, r5
 8000bc2:	f000 fca1 	bl	8001508 <_sbrk_r>
 8000bc6:	1c43      	adds	r3, r0, #1
 8000bc8:	d103      	bne.n	8000bd2 <sbrk_aligned+0x26>
 8000bca:	f04f 34ff 	mov.w	r4, #4294967295
 8000bce:	4620      	mov	r0, r4
 8000bd0:	bd70      	pop	{r4, r5, r6, pc}
 8000bd2:	1cc4      	adds	r4, r0, #3
 8000bd4:	f024 0403 	bic.w	r4, r4, #3
 8000bd8:	42a0      	cmp	r0, r4
 8000bda:	d0f8      	beq.n	8000bce <sbrk_aligned+0x22>
 8000bdc:	1a21      	subs	r1, r4, r0
 8000bde:	4628      	mov	r0, r5
 8000be0:	f000 fc92 	bl	8001508 <_sbrk_r>
 8000be4:	3001      	adds	r0, #1
 8000be6:	d1f2      	bne.n	8000bce <sbrk_aligned+0x22>
 8000be8:	e7ef      	b.n	8000bca <sbrk_aligned+0x1e>
 8000bea:	bf00      	nop
 8000bec:	200001c0 	.word	0x200001c0

08000bf0 <_malloc_r>:
 8000bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bf4:	1ccd      	adds	r5, r1, #3
 8000bf6:	f025 0503 	bic.w	r5, r5, #3
 8000bfa:	3508      	adds	r5, #8
 8000bfc:	2d0c      	cmp	r5, #12
 8000bfe:	bf38      	it	cc
 8000c00:	250c      	movcc	r5, #12
 8000c02:	2d00      	cmp	r5, #0
 8000c04:	4606      	mov	r6, r0
 8000c06:	db01      	blt.n	8000c0c <_malloc_r+0x1c>
 8000c08:	42a9      	cmp	r1, r5
 8000c0a:	d904      	bls.n	8000c16 <_malloc_r+0x26>
 8000c0c:	230c      	movs	r3, #12
 8000c0e:	6033      	str	r3, [r6, #0]
 8000c10:	2000      	movs	r0, #0
 8000c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000cec <_malloc_r+0xfc>
 8000c1a:	f000 f869 	bl	8000cf0 <__malloc_lock>
 8000c1e:	f8d8 3000 	ldr.w	r3, [r8]
 8000c22:	461c      	mov	r4, r3
 8000c24:	bb44      	cbnz	r4, 8000c78 <_malloc_r+0x88>
 8000c26:	4629      	mov	r1, r5
 8000c28:	4630      	mov	r0, r6
 8000c2a:	f7ff ffbf 	bl	8000bac <sbrk_aligned>
 8000c2e:	1c43      	adds	r3, r0, #1
 8000c30:	4604      	mov	r4, r0
 8000c32:	d158      	bne.n	8000ce6 <_malloc_r+0xf6>
 8000c34:	f8d8 4000 	ldr.w	r4, [r8]
 8000c38:	4627      	mov	r7, r4
 8000c3a:	2f00      	cmp	r7, #0
 8000c3c:	d143      	bne.n	8000cc6 <_malloc_r+0xd6>
 8000c3e:	2c00      	cmp	r4, #0
 8000c40:	d04b      	beq.n	8000cda <_malloc_r+0xea>
 8000c42:	6823      	ldr	r3, [r4, #0]
 8000c44:	4639      	mov	r1, r7
 8000c46:	4630      	mov	r0, r6
 8000c48:	eb04 0903 	add.w	r9, r4, r3
 8000c4c:	f000 fc5c 	bl	8001508 <_sbrk_r>
 8000c50:	4581      	cmp	r9, r0
 8000c52:	d142      	bne.n	8000cda <_malloc_r+0xea>
 8000c54:	6821      	ldr	r1, [r4, #0]
 8000c56:	1a6d      	subs	r5, r5, r1
 8000c58:	4629      	mov	r1, r5
 8000c5a:	4630      	mov	r0, r6
 8000c5c:	f7ff ffa6 	bl	8000bac <sbrk_aligned>
 8000c60:	3001      	adds	r0, #1
 8000c62:	d03a      	beq.n	8000cda <_malloc_r+0xea>
 8000c64:	6823      	ldr	r3, [r4, #0]
 8000c66:	442b      	add	r3, r5
 8000c68:	6023      	str	r3, [r4, #0]
 8000c6a:	f8d8 3000 	ldr.w	r3, [r8]
 8000c6e:	685a      	ldr	r2, [r3, #4]
 8000c70:	bb62      	cbnz	r2, 8000ccc <_malloc_r+0xdc>
 8000c72:	f8c8 7000 	str.w	r7, [r8]
 8000c76:	e00f      	b.n	8000c98 <_malloc_r+0xa8>
 8000c78:	6822      	ldr	r2, [r4, #0]
 8000c7a:	1b52      	subs	r2, r2, r5
 8000c7c:	d420      	bmi.n	8000cc0 <_malloc_r+0xd0>
 8000c7e:	2a0b      	cmp	r2, #11
 8000c80:	d917      	bls.n	8000cb2 <_malloc_r+0xc2>
 8000c82:	1961      	adds	r1, r4, r5
 8000c84:	42a3      	cmp	r3, r4
 8000c86:	6025      	str	r5, [r4, #0]
 8000c88:	bf18      	it	ne
 8000c8a:	6059      	strne	r1, [r3, #4]
 8000c8c:	6863      	ldr	r3, [r4, #4]
 8000c8e:	bf08      	it	eq
 8000c90:	f8c8 1000 	streq.w	r1, [r8]
 8000c94:	5162      	str	r2, [r4, r5]
 8000c96:	604b      	str	r3, [r1, #4]
 8000c98:	4630      	mov	r0, r6
 8000c9a:	f000 f82f 	bl	8000cfc <__malloc_unlock>
 8000c9e:	f104 000b 	add.w	r0, r4, #11
 8000ca2:	1d23      	adds	r3, r4, #4
 8000ca4:	f020 0007 	bic.w	r0, r0, #7
 8000ca8:	1ac2      	subs	r2, r0, r3
 8000caa:	bf1c      	itt	ne
 8000cac:	1a1b      	subne	r3, r3, r0
 8000cae:	50a3      	strne	r3, [r4, r2]
 8000cb0:	e7af      	b.n	8000c12 <_malloc_r+0x22>
 8000cb2:	6862      	ldr	r2, [r4, #4]
 8000cb4:	42a3      	cmp	r3, r4
 8000cb6:	bf0c      	ite	eq
 8000cb8:	f8c8 2000 	streq.w	r2, [r8]
 8000cbc:	605a      	strne	r2, [r3, #4]
 8000cbe:	e7eb      	b.n	8000c98 <_malloc_r+0xa8>
 8000cc0:	4623      	mov	r3, r4
 8000cc2:	6864      	ldr	r4, [r4, #4]
 8000cc4:	e7ae      	b.n	8000c24 <_malloc_r+0x34>
 8000cc6:	463c      	mov	r4, r7
 8000cc8:	687f      	ldr	r7, [r7, #4]
 8000cca:	e7b6      	b.n	8000c3a <_malloc_r+0x4a>
 8000ccc:	461a      	mov	r2, r3
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	42a3      	cmp	r3, r4
 8000cd2:	d1fb      	bne.n	8000ccc <_malloc_r+0xdc>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	6053      	str	r3, [r2, #4]
 8000cd8:	e7de      	b.n	8000c98 <_malloc_r+0xa8>
 8000cda:	230c      	movs	r3, #12
 8000cdc:	6033      	str	r3, [r6, #0]
 8000cde:	4630      	mov	r0, r6
 8000ce0:	f000 f80c 	bl	8000cfc <__malloc_unlock>
 8000ce4:	e794      	b.n	8000c10 <_malloc_r+0x20>
 8000ce6:	6005      	str	r5, [r0, #0]
 8000ce8:	e7d6      	b.n	8000c98 <_malloc_r+0xa8>
 8000cea:	bf00      	nop
 8000cec:	200001c4 	.word	0x200001c4

08000cf0 <__malloc_lock>:
 8000cf0:	4801      	ldr	r0, [pc, #4]	@ (8000cf8 <__malloc_lock+0x8>)
 8000cf2:	f7ff bf0e 	b.w	8000b12 <__retarget_lock_acquire_recursive>
 8000cf6:	bf00      	nop
 8000cf8:	200001bc 	.word	0x200001bc

08000cfc <__malloc_unlock>:
 8000cfc:	4801      	ldr	r0, [pc, #4]	@ (8000d04 <__malloc_unlock+0x8>)
 8000cfe:	f7ff bf09 	b.w	8000b14 <__retarget_lock_release_recursive>
 8000d02:	bf00      	nop
 8000d04:	200001bc 	.word	0x200001bc

08000d08 <__sfputc_r>:
 8000d08:	6893      	ldr	r3, [r2, #8]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	b410      	push	{r4}
 8000d10:	6093      	str	r3, [r2, #8]
 8000d12:	da08      	bge.n	8000d26 <__sfputc_r+0x1e>
 8000d14:	6994      	ldr	r4, [r2, #24]
 8000d16:	42a3      	cmp	r3, r4
 8000d18:	db01      	blt.n	8000d1e <__sfputc_r+0x16>
 8000d1a:	290a      	cmp	r1, #10
 8000d1c:	d103      	bne.n	8000d26 <__sfputc_r+0x1e>
 8000d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d22:	f7ff bde8 	b.w	80008f6 <__swbuf_r>
 8000d26:	6813      	ldr	r3, [r2, #0]
 8000d28:	1c58      	adds	r0, r3, #1
 8000d2a:	6010      	str	r0, [r2, #0]
 8000d2c:	7019      	strb	r1, [r3, #0]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <__sfputs_r>:
 8000d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d38:	4606      	mov	r6, r0
 8000d3a:	460f      	mov	r7, r1
 8000d3c:	4614      	mov	r4, r2
 8000d3e:	18d5      	adds	r5, r2, r3
 8000d40:	42ac      	cmp	r4, r5
 8000d42:	d101      	bne.n	8000d48 <__sfputs_r+0x12>
 8000d44:	2000      	movs	r0, #0
 8000d46:	e007      	b.n	8000d58 <__sfputs_r+0x22>
 8000d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d4c:	463a      	mov	r2, r7
 8000d4e:	4630      	mov	r0, r6
 8000d50:	f7ff ffda 	bl	8000d08 <__sfputc_r>
 8000d54:	1c43      	adds	r3, r0, #1
 8000d56:	d1f3      	bne.n	8000d40 <__sfputs_r+0xa>
 8000d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d5c <_vfiprintf_r>:
 8000d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d60:	460d      	mov	r5, r1
 8000d62:	b09d      	sub	sp, #116	@ 0x74
 8000d64:	4614      	mov	r4, r2
 8000d66:	4698      	mov	r8, r3
 8000d68:	4606      	mov	r6, r0
 8000d6a:	b118      	cbz	r0, 8000d74 <_vfiprintf_r+0x18>
 8000d6c:	6a03      	ldr	r3, [r0, #32]
 8000d6e:	b90b      	cbnz	r3, 8000d74 <_vfiprintf_r+0x18>
 8000d70:	f7ff fcd8 	bl	8000724 <__sinit>
 8000d74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d76:	07d9      	lsls	r1, r3, #31
 8000d78:	d405      	bmi.n	8000d86 <_vfiprintf_r+0x2a>
 8000d7a:	89ab      	ldrh	r3, [r5, #12]
 8000d7c:	059a      	lsls	r2, r3, #22
 8000d7e:	d402      	bmi.n	8000d86 <_vfiprintf_r+0x2a>
 8000d80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d82:	f7ff fec6 	bl	8000b12 <__retarget_lock_acquire_recursive>
 8000d86:	89ab      	ldrh	r3, [r5, #12]
 8000d88:	071b      	lsls	r3, r3, #28
 8000d8a:	d501      	bpl.n	8000d90 <_vfiprintf_r+0x34>
 8000d8c:	692b      	ldr	r3, [r5, #16]
 8000d8e:	b99b      	cbnz	r3, 8000db8 <_vfiprintf_r+0x5c>
 8000d90:	4629      	mov	r1, r5
 8000d92:	4630      	mov	r0, r6
 8000d94:	f7ff fdee 	bl	8000974 <__swsetup_r>
 8000d98:	b170      	cbz	r0, 8000db8 <_vfiprintf_r+0x5c>
 8000d9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d9c:	07dc      	lsls	r4, r3, #31
 8000d9e:	d504      	bpl.n	8000daa <_vfiprintf_r+0x4e>
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	b01d      	add	sp, #116	@ 0x74
 8000da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000daa:	89ab      	ldrh	r3, [r5, #12]
 8000dac:	0598      	lsls	r0, r3, #22
 8000dae:	d4f7      	bmi.n	8000da0 <_vfiprintf_r+0x44>
 8000db0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000db2:	f7ff feaf 	bl	8000b14 <__retarget_lock_release_recursive>
 8000db6:	e7f3      	b.n	8000da0 <_vfiprintf_r+0x44>
 8000db8:	2300      	movs	r3, #0
 8000dba:	9309      	str	r3, [sp, #36]	@ 0x24
 8000dbc:	2320      	movs	r3, #32
 8000dbe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000dc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8000dc6:	2330      	movs	r3, #48	@ 0x30
 8000dc8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000f78 <_vfiprintf_r+0x21c>
 8000dcc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000dd0:	f04f 0901 	mov.w	r9, #1
 8000dd4:	4623      	mov	r3, r4
 8000dd6:	469a      	mov	sl, r3
 8000dd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ddc:	b10a      	cbz	r2, 8000de2 <_vfiprintf_r+0x86>
 8000dde:	2a25      	cmp	r2, #37	@ 0x25
 8000de0:	d1f9      	bne.n	8000dd6 <_vfiprintf_r+0x7a>
 8000de2:	ebba 0b04 	subs.w	fp, sl, r4
 8000de6:	d00b      	beq.n	8000e00 <_vfiprintf_r+0xa4>
 8000de8:	465b      	mov	r3, fp
 8000dea:	4622      	mov	r2, r4
 8000dec:	4629      	mov	r1, r5
 8000dee:	4630      	mov	r0, r6
 8000df0:	f7ff ffa1 	bl	8000d36 <__sfputs_r>
 8000df4:	3001      	adds	r0, #1
 8000df6:	f000 80a7 	beq.w	8000f48 <_vfiprintf_r+0x1ec>
 8000dfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000dfc:	445a      	add	r2, fp
 8000dfe:	9209      	str	r2, [sp, #36]	@ 0x24
 8000e00:	f89a 3000 	ldrb.w	r3, [sl]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	f000 809f 	beq.w	8000f48 <_vfiprintf_r+0x1ec>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e14:	f10a 0a01 	add.w	sl, sl, #1
 8000e18:	9304      	str	r3, [sp, #16]
 8000e1a:	9307      	str	r3, [sp, #28]
 8000e1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000e20:	931a      	str	r3, [sp, #104]	@ 0x68
 8000e22:	4654      	mov	r4, sl
 8000e24:	2205      	movs	r2, #5
 8000e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e2a:	4853      	ldr	r0, [pc, #332]	@ (8000f78 <_vfiprintf_r+0x21c>)
 8000e2c:	f7ff f9d0 	bl	80001d0 <memchr>
 8000e30:	9a04      	ldr	r2, [sp, #16]
 8000e32:	b9d8      	cbnz	r0, 8000e6c <_vfiprintf_r+0x110>
 8000e34:	06d1      	lsls	r1, r2, #27
 8000e36:	bf44      	itt	mi
 8000e38:	2320      	movmi	r3, #32
 8000e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e3e:	0713      	lsls	r3, r2, #28
 8000e40:	bf44      	itt	mi
 8000e42:	232b      	movmi	r3, #43	@ 0x2b
 8000e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e48:	f89a 3000 	ldrb.w	r3, [sl]
 8000e4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e4e:	d015      	beq.n	8000e7c <_vfiprintf_r+0x120>
 8000e50:	9a07      	ldr	r2, [sp, #28]
 8000e52:	4654      	mov	r4, sl
 8000e54:	2000      	movs	r0, #0
 8000e56:	f04f 0c0a 	mov.w	ip, #10
 8000e5a:	4621      	mov	r1, r4
 8000e5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e60:	3b30      	subs	r3, #48	@ 0x30
 8000e62:	2b09      	cmp	r3, #9
 8000e64:	d94b      	bls.n	8000efe <_vfiprintf_r+0x1a2>
 8000e66:	b1b0      	cbz	r0, 8000e96 <_vfiprintf_r+0x13a>
 8000e68:	9207      	str	r2, [sp, #28]
 8000e6a:	e014      	b.n	8000e96 <_vfiprintf_r+0x13a>
 8000e6c:	eba0 0308 	sub.w	r3, r0, r8
 8000e70:	fa09 f303 	lsl.w	r3, r9, r3
 8000e74:	4313      	orrs	r3, r2
 8000e76:	9304      	str	r3, [sp, #16]
 8000e78:	46a2      	mov	sl, r4
 8000e7a:	e7d2      	b.n	8000e22 <_vfiprintf_r+0xc6>
 8000e7c:	9b03      	ldr	r3, [sp, #12]
 8000e7e:	1d19      	adds	r1, r3, #4
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	9103      	str	r1, [sp, #12]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	bfbb      	ittet	lt
 8000e88:	425b      	neglt	r3, r3
 8000e8a:	f042 0202 	orrlt.w	r2, r2, #2
 8000e8e:	9307      	strge	r3, [sp, #28]
 8000e90:	9307      	strlt	r3, [sp, #28]
 8000e92:	bfb8      	it	lt
 8000e94:	9204      	strlt	r2, [sp, #16]
 8000e96:	7823      	ldrb	r3, [r4, #0]
 8000e98:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e9a:	d10a      	bne.n	8000eb2 <_vfiprintf_r+0x156>
 8000e9c:	7863      	ldrb	r3, [r4, #1]
 8000e9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ea0:	d132      	bne.n	8000f08 <_vfiprintf_r+0x1ac>
 8000ea2:	9b03      	ldr	r3, [sp, #12]
 8000ea4:	1d1a      	adds	r2, r3, #4
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	9203      	str	r2, [sp, #12]
 8000eaa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000eae:	3402      	adds	r4, #2
 8000eb0:	9305      	str	r3, [sp, #20]
 8000eb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000f88 <_vfiprintf_r+0x22c>
 8000eb6:	7821      	ldrb	r1, [r4, #0]
 8000eb8:	2203      	movs	r2, #3
 8000eba:	4650      	mov	r0, sl
 8000ebc:	f7ff f988 	bl	80001d0 <memchr>
 8000ec0:	b138      	cbz	r0, 8000ed2 <_vfiprintf_r+0x176>
 8000ec2:	9b04      	ldr	r3, [sp, #16]
 8000ec4:	eba0 000a 	sub.w	r0, r0, sl
 8000ec8:	2240      	movs	r2, #64	@ 0x40
 8000eca:	4082      	lsls	r2, r0
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	3401      	adds	r4, #1
 8000ed0:	9304      	str	r3, [sp, #16]
 8000ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ed6:	4829      	ldr	r0, [pc, #164]	@ (8000f7c <_vfiprintf_r+0x220>)
 8000ed8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000edc:	2206      	movs	r2, #6
 8000ede:	f7ff f977 	bl	80001d0 <memchr>
 8000ee2:	2800      	cmp	r0, #0
 8000ee4:	d03f      	beq.n	8000f66 <_vfiprintf_r+0x20a>
 8000ee6:	4b26      	ldr	r3, [pc, #152]	@ (8000f80 <_vfiprintf_r+0x224>)
 8000ee8:	bb1b      	cbnz	r3, 8000f32 <_vfiprintf_r+0x1d6>
 8000eea:	9b03      	ldr	r3, [sp, #12]
 8000eec:	3307      	adds	r3, #7
 8000eee:	f023 0307 	bic.w	r3, r3, #7
 8000ef2:	3308      	adds	r3, #8
 8000ef4:	9303      	str	r3, [sp, #12]
 8000ef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000ef8:	443b      	add	r3, r7
 8000efa:	9309      	str	r3, [sp, #36]	@ 0x24
 8000efc:	e76a      	b.n	8000dd4 <_vfiprintf_r+0x78>
 8000efe:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f02:	460c      	mov	r4, r1
 8000f04:	2001      	movs	r0, #1
 8000f06:	e7a8      	b.n	8000e5a <_vfiprintf_r+0xfe>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	3401      	adds	r4, #1
 8000f0c:	9305      	str	r3, [sp, #20]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f04f 0c0a 	mov.w	ip, #10
 8000f14:	4620      	mov	r0, r4
 8000f16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f1a:	3a30      	subs	r2, #48	@ 0x30
 8000f1c:	2a09      	cmp	r2, #9
 8000f1e:	d903      	bls.n	8000f28 <_vfiprintf_r+0x1cc>
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d0c6      	beq.n	8000eb2 <_vfiprintf_r+0x156>
 8000f24:	9105      	str	r1, [sp, #20]
 8000f26:	e7c4      	b.n	8000eb2 <_vfiprintf_r+0x156>
 8000f28:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f2c:	4604      	mov	r4, r0
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e7f0      	b.n	8000f14 <_vfiprintf_r+0x1b8>
 8000f32:	ab03      	add	r3, sp, #12
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	462a      	mov	r2, r5
 8000f38:	4b12      	ldr	r3, [pc, #72]	@ (8000f84 <_vfiprintf_r+0x228>)
 8000f3a:	a904      	add	r1, sp, #16
 8000f3c:	4630      	mov	r0, r6
 8000f3e:	f3af 8000 	nop.w
 8000f42:	4607      	mov	r7, r0
 8000f44:	1c78      	adds	r0, r7, #1
 8000f46:	d1d6      	bne.n	8000ef6 <_vfiprintf_r+0x19a>
 8000f48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000f4a:	07d9      	lsls	r1, r3, #31
 8000f4c:	d405      	bmi.n	8000f5a <_vfiprintf_r+0x1fe>
 8000f4e:	89ab      	ldrh	r3, [r5, #12]
 8000f50:	059a      	lsls	r2, r3, #22
 8000f52:	d402      	bmi.n	8000f5a <_vfiprintf_r+0x1fe>
 8000f54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000f56:	f7ff fddd 	bl	8000b14 <__retarget_lock_release_recursive>
 8000f5a:	89ab      	ldrh	r3, [r5, #12]
 8000f5c:	065b      	lsls	r3, r3, #25
 8000f5e:	f53f af1f 	bmi.w	8000da0 <_vfiprintf_r+0x44>
 8000f62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000f64:	e71e      	b.n	8000da4 <_vfiprintf_r+0x48>
 8000f66:	ab03      	add	r3, sp, #12
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	462a      	mov	r2, r5
 8000f6c:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <_vfiprintf_r+0x228>)
 8000f6e:	a904      	add	r1, sp, #16
 8000f70:	4630      	mov	r0, r6
 8000f72:	f000 f879 	bl	8001068 <_printf_i>
 8000f76:	e7e4      	b.n	8000f42 <_vfiprintf_r+0x1e6>
 8000f78:	08001691 	.word	0x08001691
 8000f7c:	0800169b 	.word	0x0800169b
 8000f80:	00000000 	.word	0x00000000
 8000f84:	08000d37 	.word	0x08000d37
 8000f88:	08001697 	.word	0x08001697

08000f8c <_printf_common>:
 8000f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f90:	4616      	mov	r6, r2
 8000f92:	4698      	mov	r8, r3
 8000f94:	688a      	ldr	r2, [r1, #8]
 8000f96:	690b      	ldr	r3, [r1, #16]
 8000f98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	bfb8      	it	lt
 8000fa0:	4613      	movlt	r3, r2
 8000fa2:	6033      	str	r3, [r6, #0]
 8000fa4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000fa8:	4607      	mov	r7, r0
 8000faa:	460c      	mov	r4, r1
 8000fac:	b10a      	cbz	r2, 8000fb2 <_printf_common+0x26>
 8000fae:	3301      	adds	r3, #1
 8000fb0:	6033      	str	r3, [r6, #0]
 8000fb2:	6823      	ldr	r3, [r4, #0]
 8000fb4:	0699      	lsls	r1, r3, #26
 8000fb6:	bf42      	ittt	mi
 8000fb8:	6833      	ldrmi	r3, [r6, #0]
 8000fba:	3302      	addmi	r3, #2
 8000fbc:	6033      	strmi	r3, [r6, #0]
 8000fbe:	6825      	ldr	r5, [r4, #0]
 8000fc0:	f015 0506 	ands.w	r5, r5, #6
 8000fc4:	d106      	bne.n	8000fd4 <_printf_common+0x48>
 8000fc6:	f104 0a19 	add.w	sl, r4, #25
 8000fca:	68e3      	ldr	r3, [r4, #12]
 8000fcc:	6832      	ldr	r2, [r6, #0]
 8000fce:	1a9b      	subs	r3, r3, r2
 8000fd0:	42ab      	cmp	r3, r5
 8000fd2:	dc26      	bgt.n	8001022 <_printf_common+0x96>
 8000fd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000fd8:	6822      	ldr	r2, [r4, #0]
 8000fda:	3b00      	subs	r3, #0
 8000fdc:	bf18      	it	ne
 8000fde:	2301      	movne	r3, #1
 8000fe0:	0692      	lsls	r2, r2, #26
 8000fe2:	d42b      	bmi.n	800103c <_printf_common+0xb0>
 8000fe4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000fe8:	4641      	mov	r1, r8
 8000fea:	4638      	mov	r0, r7
 8000fec:	47c8      	blx	r9
 8000fee:	3001      	adds	r0, #1
 8000ff0:	d01e      	beq.n	8001030 <_printf_common+0xa4>
 8000ff2:	6823      	ldr	r3, [r4, #0]
 8000ff4:	6922      	ldr	r2, [r4, #16]
 8000ff6:	f003 0306 	and.w	r3, r3, #6
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	bf02      	ittt	eq
 8000ffe:	68e5      	ldreq	r5, [r4, #12]
 8001000:	6833      	ldreq	r3, [r6, #0]
 8001002:	1aed      	subeq	r5, r5, r3
 8001004:	68a3      	ldr	r3, [r4, #8]
 8001006:	bf0c      	ite	eq
 8001008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800100c:	2500      	movne	r5, #0
 800100e:	4293      	cmp	r3, r2
 8001010:	bfc4      	itt	gt
 8001012:	1a9b      	subgt	r3, r3, r2
 8001014:	18ed      	addgt	r5, r5, r3
 8001016:	2600      	movs	r6, #0
 8001018:	341a      	adds	r4, #26
 800101a:	42b5      	cmp	r5, r6
 800101c:	d11a      	bne.n	8001054 <_printf_common+0xc8>
 800101e:	2000      	movs	r0, #0
 8001020:	e008      	b.n	8001034 <_printf_common+0xa8>
 8001022:	2301      	movs	r3, #1
 8001024:	4652      	mov	r2, sl
 8001026:	4641      	mov	r1, r8
 8001028:	4638      	mov	r0, r7
 800102a:	47c8      	blx	r9
 800102c:	3001      	adds	r0, #1
 800102e:	d103      	bne.n	8001038 <_printf_common+0xac>
 8001030:	f04f 30ff 	mov.w	r0, #4294967295
 8001034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001038:	3501      	adds	r5, #1
 800103a:	e7c6      	b.n	8000fca <_printf_common+0x3e>
 800103c:	18e1      	adds	r1, r4, r3
 800103e:	1c5a      	adds	r2, r3, #1
 8001040:	2030      	movs	r0, #48	@ 0x30
 8001042:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001046:	4422      	add	r2, r4
 8001048:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800104c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001050:	3302      	adds	r3, #2
 8001052:	e7c7      	b.n	8000fe4 <_printf_common+0x58>
 8001054:	2301      	movs	r3, #1
 8001056:	4622      	mov	r2, r4
 8001058:	4641      	mov	r1, r8
 800105a:	4638      	mov	r0, r7
 800105c:	47c8      	blx	r9
 800105e:	3001      	adds	r0, #1
 8001060:	d0e6      	beq.n	8001030 <_printf_common+0xa4>
 8001062:	3601      	adds	r6, #1
 8001064:	e7d9      	b.n	800101a <_printf_common+0x8e>
	...

08001068 <_printf_i>:
 8001068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800106c:	7e0f      	ldrb	r7, [r1, #24]
 800106e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001070:	2f78      	cmp	r7, #120	@ 0x78
 8001072:	4691      	mov	r9, r2
 8001074:	4680      	mov	r8, r0
 8001076:	460c      	mov	r4, r1
 8001078:	469a      	mov	sl, r3
 800107a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800107e:	d807      	bhi.n	8001090 <_printf_i+0x28>
 8001080:	2f62      	cmp	r7, #98	@ 0x62
 8001082:	d80a      	bhi.n	800109a <_printf_i+0x32>
 8001084:	2f00      	cmp	r7, #0
 8001086:	f000 80d2 	beq.w	800122e <_printf_i+0x1c6>
 800108a:	2f58      	cmp	r7, #88	@ 0x58
 800108c:	f000 80b9 	beq.w	8001202 <_printf_i+0x19a>
 8001090:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001094:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001098:	e03a      	b.n	8001110 <_printf_i+0xa8>
 800109a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800109e:	2b15      	cmp	r3, #21
 80010a0:	d8f6      	bhi.n	8001090 <_printf_i+0x28>
 80010a2:	a101      	add	r1, pc, #4	@ (adr r1, 80010a8 <_printf_i+0x40>)
 80010a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80010a8:	08001101 	.word	0x08001101
 80010ac:	08001115 	.word	0x08001115
 80010b0:	08001091 	.word	0x08001091
 80010b4:	08001091 	.word	0x08001091
 80010b8:	08001091 	.word	0x08001091
 80010bc:	08001091 	.word	0x08001091
 80010c0:	08001115 	.word	0x08001115
 80010c4:	08001091 	.word	0x08001091
 80010c8:	08001091 	.word	0x08001091
 80010cc:	08001091 	.word	0x08001091
 80010d0:	08001091 	.word	0x08001091
 80010d4:	08001215 	.word	0x08001215
 80010d8:	0800113f 	.word	0x0800113f
 80010dc:	080011cf 	.word	0x080011cf
 80010e0:	08001091 	.word	0x08001091
 80010e4:	08001091 	.word	0x08001091
 80010e8:	08001237 	.word	0x08001237
 80010ec:	08001091 	.word	0x08001091
 80010f0:	0800113f 	.word	0x0800113f
 80010f4:	08001091 	.word	0x08001091
 80010f8:	08001091 	.word	0x08001091
 80010fc:	080011d7 	.word	0x080011d7
 8001100:	6833      	ldr	r3, [r6, #0]
 8001102:	1d1a      	adds	r2, r3, #4
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6032      	str	r2, [r6, #0]
 8001108:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800110c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001110:	2301      	movs	r3, #1
 8001112:	e09d      	b.n	8001250 <_printf_i+0x1e8>
 8001114:	6833      	ldr	r3, [r6, #0]
 8001116:	6820      	ldr	r0, [r4, #0]
 8001118:	1d19      	adds	r1, r3, #4
 800111a:	6031      	str	r1, [r6, #0]
 800111c:	0606      	lsls	r6, r0, #24
 800111e:	d501      	bpl.n	8001124 <_printf_i+0xbc>
 8001120:	681d      	ldr	r5, [r3, #0]
 8001122:	e003      	b.n	800112c <_printf_i+0xc4>
 8001124:	0645      	lsls	r5, r0, #25
 8001126:	d5fb      	bpl.n	8001120 <_printf_i+0xb8>
 8001128:	f9b3 5000 	ldrsh.w	r5, [r3]
 800112c:	2d00      	cmp	r5, #0
 800112e:	da03      	bge.n	8001138 <_printf_i+0xd0>
 8001130:	232d      	movs	r3, #45	@ 0x2d
 8001132:	426d      	negs	r5, r5
 8001134:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001138:	4859      	ldr	r0, [pc, #356]	@ (80012a0 <_printf_i+0x238>)
 800113a:	230a      	movs	r3, #10
 800113c:	e011      	b.n	8001162 <_printf_i+0xfa>
 800113e:	6821      	ldr	r1, [r4, #0]
 8001140:	6833      	ldr	r3, [r6, #0]
 8001142:	0608      	lsls	r0, r1, #24
 8001144:	f853 5b04 	ldr.w	r5, [r3], #4
 8001148:	d402      	bmi.n	8001150 <_printf_i+0xe8>
 800114a:	0649      	lsls	r1, r1, #25
 800114c:	bf48      	it	mi
 800114e:	b2ad      	uxthmi	r5, r5
 8001150:	2f6f      	cmp	r7, #111	@ 0x6f
 8001152:	4853      	ldr	r0, [pc, #332]	@ (80012a0 <_printf_i+0x238>)
 8001154:	6033      	str	r3, [r6, #0]
 8001156:	bf14      	ite	ne
 8001158:	230a      	movne	r3, #10
 800115a:	2308      	moveq	r3, #8
 800115c:	2100      	movs	r1, #0
 800115e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001162:	6866      	ldr	r6, [r4, #4]
 8001164:	60a6      	str	r6, [r4, #8]
 8001166:	2e00      	cmp	r6, #0
 8001168:	bfa2      	ittt	ge
 800116a:	6821      	ldrge	r1, [r4, #0]
 800116c:	f021 0104 	bicge.w	r1, r1, #4
 8001170:	6021      	strge	r1, [r4, #0]
 8001172:	b90d      	cbnz	r5, 8001178 <_printf_i+0x110>
 8001174:	2e00      	cmp	r6, #0
 8001176:	d04b      	beq.n	8001210 <_printf_i+0x1a8>
 8001178:	4616      	mov	r6, r2
 800117a:	fbb5 f1f3 	udiv	r1, r5, r3
 800117e:	fb03 5711 	mls	r7, r3, r1, r5
 8001182:	5dc7      	ldrb	r7, [r0, r7]
 8001184:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001188:	462f      	mov	r7, r5
 800118a:	42bb      	cmp	r3, r7
 800118c:	460d      	mov	r5, r1
 800118e:	d9f4      	bls.n	800117a <_printf_i+0x112>
 8001190:	2b08      	cmp	r3, #8
 8001192:	d10b      	bne.n	80011ac <_printf_i+0x144>
 8001194:	6823      	ldr	r3, [r4, #0]
 8001196:	07df      	lsls	r7, r3, #31
 8001198:	d508      	bpl.n	80011ac <_printf_i+0x144>
 800119a:	6923      	ldr	r3, [r4, #16]
 800119c:	6861      	ldr	r1, [r4, #4]
 800119e:	4299      	cmp	r1, r3
 80011a0:	bfde      	ittt	le
 80011a2:	2330      	movle	r3, #48	@ 0x30
 80011a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80011a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80011ac:	1b92      	subs	r2, r2, r6
 80011ae:	6122      	str	r2, [r4, #16]
 80011b0:	f8cd a000 	str.w	sl, [sp]
 80011b4:	464b      	mov	r3, r9
 80011b6:	aa03      	add	r2, sp, #12
 80011b8:	4621      	mov	r1, r4
 80011ba:	4640      	mov	r0, r8
 80011bc:	f7ff fee6 	bl	8000f8c <_printf_common>
 80011c0:	3001      	adds	r0, #1
 80011c2:	d14a      	bne.n	800125a <_printf_i+0x1f2>
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	b004      	add	sp, #16
 80011ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ce:	6823      	ldr	r3, [r4, #0]
 80011d0:	f043 0320 	orr.w	r3, r3, #32
 80011d4:	6023      	str	r3, [r4, #0]
 80011d6:	4833      	ldr	r0, [pc, #204]	@ (80012a4 <_printf_i+0x23c>)
 80011d8:	2778      	movs	r7, #120	@ 0x78
 80011da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80011de:	6823      	ldr	r3, [r4, #0]
 80011e0:	6831      	ldr	r1, [r6, #0]
 80011e2:	061f      	lsls	r7, r3, #24
 80011e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80011e8:	d402      	bmi.n	80011f0 <_printf_i+0x188>
 80011ea:	065f      	lsls	r7, r3, #25
 80011ec:	bf48      	it	mi
 80011ee:	b2ad      	uxthmi	r5, r5
 80011f0:	6031      	str	r1, [r6, #0]
 80011f2:	07d9      	lsls	r1, r3, #31
 80011f4:	bf44      	itt	mi
 80011f6:	f043 0320 	orrmi.w	r3, r3, #32
 80011fa:	6023      	strmi	r3, [r4, #0]
 80011fc:	b11d      	cbz	r5, 8001206 <_printf_i+0x19e>
 80011fe:	2310      	movs	r3, #16
 8001200:	e7ac      	b.n	800115c <_printf_i+0xf4>
 8001202:	4827      	ldr	r0, [pc, #156]	@ (80012a0 <_printf_i+0x238>)
 8001204:	e7e9      	b.n	80011da <_printf_i+0x172>
 8001206:	6823      	ldr	r3, [r4, #0]
 8001208:	f023 0320 	bic.w	r3, r3, #32
 800120c:	6023      	str	r3, [r4, #0]
 800120e:	e7f6      	b.n	80011fe <_printf_i+0x196>
 8001210:	4616      	mov	r6, r2
 8001212:	e7bd      	b.n	8001190 <_printf_i+0x128>
 8001214:	6833      	ldr	r3, [r6, #0]
 8001216:	6825      	ldr	r5, [r4, #0]
 8001218:	6961      	ldr	r1, [r4, #20]
 800121a:	1d18      	adds	r0, r3, #4
 800121c:	6030      	str	r0, [r6, #0]
 800121e:	062e      	lsls	r6, r5, #24
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	d501      	bpl.n	8001228 <_printf_i+0x1c0>
 8001224:	6019      	str	r1, [r3, #0]
 8001226:	e002      	b.n	800122e <_printf_i+0x1c6>
 8001228:	0668      	lsls	r0, r5, #25
 800122a:	d5fb      	bpl.n	8001224 <_printf_i+0x1bc>
 800122c:	8019      	strh	r1, [r3, #0]
 800122e:	2300      	movs	r3, #0
 8001230:	6123      	str	r3, [r4, #16]
 8001232:	4616      	mov	r6, r2
 8001234:	e7bc      	b.n	80011b0 <_printf_i+0x148>
 8001236:	6833      	ldr	r3, [r6, #0]
 8001238:	1d1a      	adds	r2, r3, #4
 800123a:	6032      	str	r2, [r6, #0]
 800123c:	681e      	ldr	r6, [r3, #0]
 800123e:	6862      	ldr	r2, [r4, #4]
 8001240:	2100      	movs	r1, #0
 8001242:	4630      	mov	r0, r6
 8001244:	f7fe ffc4 	bl	80001d0 <memchr>
 8001248:	b108      	cbz	r0, 800124e <_printf_i+0x1e6>
 800124a:	1b80      	subs	r0, r0, r6
 800124c:	6060      	str	r0, [r4, #4]
 800124e:	6863      	ldr	r3, [r4, #4]
 8001250:	6123      	str	r3, [r4, #16]
 8001252:	2300      	movs	r3, #0
 8001254:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001258:	e7aa      	b.n	80011b0 <_printf_i+0x148>
 800125a:	6923      	ldr	r3, [r4, #16]
 800125c:	4632      	mov	r2, r6
 800125e:	4649      	mov	r1, r9
 8001260:	4640      	mov	r0, r8
 8001262:	47d0      	blx	sl
 8001264:	3001      	adds	r0, #1
 8001266:	d0ad      	beq.n	80011c4 <_printf_i+0x15c>
 8001268:	6823      	ldr	r3, [r4, #0]
 800126a:	079b      	lsls	r3, r3, #30
 800126c:	d413      	bmi.n	8001296 <_printf_i+0x22e>
 800126e:	68e0      	ldr	r0, [r4, #12]
 8001270:	9b03      	ldr	r3, [sp, #12]
 8001272:	4298      	cmp	r0, r3
 8001274:	bfb8      	it	lt
 8001276:	4618      	movlt	r0, r3
 8001278:	e7a6      	b.n	80011c8 <_printf_i+0x160>
 800127a:	2301      	movs	r3, #1
 800127c:	4632      	mov	r2, r6
 800127e:	4649      	mov	r1, r9
 8001280:	4640      	mov	r0, r8
 8001282:	47d0      	blx	sl
 8001284:	3001      	adds	r0, #1
 8001286:	d09d      	beq.n	80011c4 <_printf_i+0x15c>
 8001288:	3501      	adds	r5, #1
 800128a:	68e3      	ldr	r3, [r4, #12]
 800128c:	9903      	ldr	r1, [sp, #12]
 800128e:	1a5b      	subs	r3, r3, r1
 8001290:	42ab      	cmp	r3, r5
 8001292:	dcf2      	bgt.n	800127a <_printf_i+0x212>
 8001294:	e7eb      	b.n	800126e <_printf_i+0x206>
 8001296:	2500      	movs	r5, #0
 8001298:	f104 0619 	add.w	r6, r4, #25
 800129c:	e7f5      	b.n	800128a <_printf_i+0x222>
 800129e:	bf00      	nop
 80012a0:	080016a2 	.word	0x080016a2
 80012a4:	080016b3 	.word	0x080016b3

080012a8 <__sflush_r>:
 80012a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80012ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012b0:	0716      	lsls	r6, r2, #28
 80012b2:	4605      	mov	r5, r0
 80012b4:	460c      	mov	r4, r1
 80012b6:	d454      	bmi.n	8001362 <__sflush_r+0xba>
 80012b8:	684b      	ldr	r3, [r1, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	dc02      	bgt.n	80012c4 <__sflush_r+0x1c>
 80012be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	dd48      	ble.n	8001356 <__sflush_r+0xae>
 80012c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80012c6:	2e00      	cmp	r6, #0
 80012c8:	d045      	beq.n	8001356 <__sflush_r+0xae>
 80012ca:	2300      	movs	r3, #0
 80012cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80012d0:	682f      	ldr	r7, [r5, #0]
 80012d2:	6a21      	ldr	r1, [r4, #32]
 80012d4:	602b      	str	r3, [r5, #0]
 80012d6:	d030      	beq.n	800133a <__sflush_r+0x92>
 80012d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80012da:	89a3      	ldrh	r3, [r4, #12]
 80012dc:	0759      	lsls	r1, r3, #29
 80012de:	d505      	bpl.n	80012ec <__sflush_r+0x44>
 80012e0:	6863      	ldr	r3, [r4, #4]
 80012e2:	1ad2      	subs	r2, r2, r3
 80012e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80012e6:	b10b      	cbz	r3, 80012ec <__sflush_r+0x44>
 80012e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80012ea:	1ad2      	subs	r2, r2, r3
 80012ec:	2300      	movs	r3, #0
 80012ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80012f0:	6a21      	ldr	r1, [r4, #32]
 80012f2:	4628      	mov	r0, r5
 80012f4:	47b0      	blx	r6
 80012f6:	1c43      	adds	r3, r0, #1
 80012f8:	89a3      	ldrh	r3, [r4, #12]
 80012fa:	d106      	bne.n	800130a <__sflush_r+0x62>
 80012fc:	6829      	ldr	r1, [r5, #0]
 80012fe:	291d      	cmp	r1, #29
 8001300:	d82b      	bhi.n	800135a <__sflush_r+0xb2>
 8001302:	4a2a      	ldr	r2, [pc, #168]	@ (80013ac <__sflush_r+0x104>)
 8001304:	410a      	asrs	r2, r1
 8001306:	07d6      	lsls	r6, r2, #31
 8001308:	d427      	bmi.n	800135a <__sflush_r+0xb2>
 800130a:	2200      	movs	r2, #0
 800130c:	6062      	str	r2, [r4, #4]
 800130e:	04d9      	lsls	r1, r3, #19
 8001310:	6922      	ldr	r2, [r4, #16]
 8001312:	6022      	str	r2, [r4, #0]
 8001314:	d504      	bpl.n	8001320 <__sflush_r+0x78>
 8001316:	1c42      	adds	r2, r0, #1
 8001318:	d101      	bne.n	800131e <__sflush_r+0x76>
 800131a:	682b      	ldr	r3, [r5, #0]
 800131c:	b903      	cbnz	r3, 8001320 <__sflush_r+0x78>
 800131e:	6560      	str	r0, [r4, #84]	@ 0x54
 8001320:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001322:	602f      	str	r7, [r5, #0]
 8001324:	b1b9      	cbz	r1, 8001356 <__sflush_r+0xae>
 8001326:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800132a:	4299      	cmp	r1, r3
 800132c:	d002      	beq.n	8001334 <__sflush_r+0x8c>
 800132e:	4628      	mov	r0, r5
 8001330:	f7ff fbf2 	bl	8000b18 <_free_r>
 8001334:	2300      	movs	r3, #0
 8001336:	6363      	str	r3, [r4, #52]	@ 0x34
 8001338:	e00d      	b.n	8001356 <__sflush_r+0xae>
 800133a:	2301      	movs	r3, #1
 800133c:	4628      	mov	r0, r5
 800133e:	47b0      	blx	r6
 8001340:	4602      	mov	r2, r0
 8001342:	1c50      	adds	r0, r2, #1
 8001344:	d1c9      	bne.n	80012da <__sflush_r+0x32>
 8001346:	682b      	ldr	r3, [r5, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0c6      	beq.n	80012da <__sflush_r+0x32>
 800134c:	2b1d      	cmp	r3, #29
 800134e:	d001      	beq.n	8001354 <__sflush_r+0xac>
 8001350:	2b16      	cmp	r3, #22
 8001352:	d11e      	bne.n	8001392 <__sflush_r+0xea>
 8001354:	602f      	str	r7, [r5, #0]
 8001356:	2000      	movs	r0, #0
 8001358:	e022      	b.n	80013a0 <__sflush_r+0xf8>
 800135a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800135e:	b21b      	sxth	r3, r3
 8001360:	e01b      	b.n	800139a <__sflush_r+0xf2>
 8001362:	690f      	ldr	r7, [r1, #16]
 8001364:	2f00      	cmp	r7, #0
 8001366:	d0f6      	beq.n	8001356 <__sflush_r+0xae>
 8001368:	0793      	lsls	r3, r2, #30
 800136a:	680e      	ldr	r6, [r1, #0]
 800136c:	bf08      	it	eq
 800136e:	694b      	ldreq	r3, [r1, #20]
 8001370:	600f      	str	r7, [r1, #0]
 8001372:	bf18      	it	ne
 8001374:	2300      	movne	r3, #0
 8001376:	eba6 0807 	sub.w	r8, r6, r7
 800137a:	608b      	str	r3, [r1, #8]
 800137c:	f1b8 0f00 	cmp.w	r8, #0
 8001380:	dde9      	ble.n	8001356 <__sflush_r+0xae>
 8001382:	6a21      	ldr	r1, [r4, #32]
 8001384:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001386:	4643      	mov	r3, r8
 8001388:	463a      	mov	r2, r7
 800138a:	4628      	mov	r0, r5
 800138c:	47b0      	blx	r6
 800138e:	2800      	cmp	r0, #0
 8001390:	dc08      	bgt.n	80013a4 <__sflush_r+0xfc>
 8001392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001396:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800139a:	81a3      	strh	r3, [r4, #12]
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013a4:	4407      	add	r7, r0
 80013a6:	eba8 0800 	sub.w	r8, r8, r0
 80013aa:	e7e7      	b.n	800137c <__sflush_r+0xd4>
 80013ac:	dfbffffe 	.word	0xdfbffffe

080013b0 <_fflush_r>:
 80013b0:	b538      	push	{r3, r4, r5, lr}
 80013b2:	690b      	ldr	r3, [r1, #16]
 80013b4:	4605      	mov	r5, r0
 80013b6:	460c      	mov	r4, r1
 80013b8:	b913      	cbnz	r3, 80013c0 <_fflush_r+0x10>
 80013ba:	2500      	movs	r5, #0
 80013bc:	4628      	mov	r0, r5
 80013be:	bd38      	pop	{r3, r4, r5, pc}
 80013c0:	b118      	cbz	r0, 80013ca <_fflush_r+0x1a>
 80013c2:	6a03      	ldr	r3, [r0, #32]
 80013c4:	b90b      	cbnz	r3, 80013ca <_fflush_r+0x1a>
 80013c6:	f7ff f9ad 	bl	8000724 <__sinit>
 80013ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0f3      	beq.n	80013ba <_fflush_r+0xa>
 80013d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80013d4:	07d0      	lsls	r0, r2, #31
 80013d6:	d404      	bmi.n	80013e2 <_fflush_r+0x32>
 80013d8:	0599      	lsls	r1, r3, #22
 80013da:	d402      	bmi.n	80013e2 <_fflush_r+0x32>
 80013dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80013de:	f7ff fb98 	bl	8000b12 <__retarget_lock_acquire_recursive>
 80013e2:	4628      	mov	r0, r5
 80013e4:	4621      	mov	r1, r4
 80013e6:	f7ff ff5f 	bl	80012a8 <__sflush_r>
 80013ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80013ec:	07da      	lsls	r2, r3, #31
 80013ee:	4605      	mov	r5, r0
 80013f0:	d4e4      	bmi.n	80013bc <_fflush_r+0xc>
 80013f2:	89a3      	ldrh	r3, [r4, #12]
 80013f4:	059b      	lsls	r3, r3, #22
 80013f6:	d4e1      	bmi.n	80013bc <_fflush_r+0xc>
 80013f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80013fa:	f7ff fb8b 	bl	8000b14 <__retarget_lock_release_recursive>
 80013fe:	e7dd      	b.n	80013bc <_fflush_r+0xc>

08001400 <__swhatbuf_r>:
 8001400:	b570      	push	{r4, r5, r6, lr}
 8001402:	460c      	mov	r4, r1
 8001404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001408:	2900      	cmp	r1, #0
 800140a:	b096      	sub	sp, #88	@ 0x58
 800140c:	4615      	mov	r5, r2
 800140e:	461e      	mov	r6, r3
 8001410:	da0d      	bge.n	800142e <__swhatbuf_r+0x2e>
 8001412:	89a3      	ldrh	r3, [r4, #12]
 8001414:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001418:	f04f 0100 	mov.w	r1, #0
 800141c:	bf14      	ite	ne
 800141e:	2340      	movne	r3, #64	@ 0x40
 8001420:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001424:	2000      	movs	r0, #0
 8001426:	6031      	str	r1, [r6, #0]
 8001428:	602b      	str	r3, [r5, #0]
 800142a:	b016      	add	sp, #88	@ 0x58
 800142c:	bd70      	pop	{r4, r5, r6, pc}
 800142e:	466a      	mov	r2, sp
 8001430:	f000 f848 	bl	80014c4 <_fstat_r>
 8001434:	2800      	cmp	r0, #0
 8001436:	dbec      	blt.n	8001412 <__swhatbuf_r+0x12>
 8001438:	9901      	ldr	r1, [sp, #4]
 800143a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800143e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001442:	4259      	negs	r1, r3
 8001444:	4159      	adcs	r1, r3
 8001446:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800144a:	e7eb      	b.n	8001424 <__swhatbuf_r+0x24>

0800144c <__smakebuf_r>:
 800144c:	898b      	ldrh	r3, [r1, #12]
 800144e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001450:	079d      	lsls	r5, r3, #30
 8001452:	4606      	mov	r6, r0
 8001454:	460c      	mov	r4, r1
 8001456:	d507      	bpl.n	8001468 <__smakebuf_r+0x1c>
 8001458:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800145c:	6023      	str	r3, [r4, #0]
 800145e:	6123      	str	r3, [r4, #16]
 8001460:	2301      	movs	r3, #1
 8001462:	6163      	str	r3, [r4, #20]
 8001464:	b003      	add	sp, #12
 8001466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001468:	ab01      	add	r3, sp, #4
 800146a:	466a      	mov	r2, sp
 800146c:	f7ff ffc8 	bl	8001400 <__swhatbuf_r>
 8001470:	9f00      	ldr	r7, [sp, #0]
 8001472:	4605      	mov	r5, r0
 8001474:	4639      	mov	r1, r7
 8001476:	4630      	mov	r0, r6
 8001478:	f7ff fbba 	bl	8000bf0 <_malloc_r>
 800147c:	b948      	cbnz	r0, 8001492 <__smakebuf_r+0x46>
 800147e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001482:	059a      	lsls	r2, r3, #22
 8001484:	d4ee      	bmi.n	8001464 <__smakebuf_r+0x18>
 8001486:	f023 0303 	bic.w	r3, r3, #3
 800148a:	f043 0302 	orr.w	r3, r3, #2
 800148e:	81a3      	strh	r3, [r4, #12]
 8001490:	e7e2      	b.n	8001458 <__smakebuf_r+0xc>
 8001492:	89a3      	ldrh	r3, [r4, #12]
 8001494:	6020      	str	r0, [r4, #0]
 8001496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800149a:	81a3      	strh	r3, [r4, #12]
 800149c:	9b01      	ldr	r3, [sp, #4]
 800149e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80014a2:	b15b      	cbz	r3, 80014bc <__smakebuf_r+0x70>
 80014a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014a8:	4630      	mov	r0, r6
 80014aa:	f000 f81d 	bl	80014e8 <_isatty_r>
 80014ae:	b128      	cbz	r0, 80014bc <__smakebuf_r+0x70>
 80014b0:	89a3      	ldrh	r3, [r4, #12]
 80014b2:	f023 0303 	bic.w	r3, r3, #3
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	81a3      	strh	r3, [r4, #12]
 80014bc:	89a3      	ldrh	r3, [r4, #12]
 80014be:	431d      	orrs	r5, r3
 80014c0:	81a5      	strh	r5, [r4, #12]
 80014c2:	e7cf      	b.n	8001464 <__smakebuf_r+0x18>

080014c4 <_fstat_r>:
 80014c4:	b538      	push	{r3, r4, r5, lr}
 80014c6:	4d07      	ldr	r5, [pc, #28]	@ (80014e4 <_fstat_r+0x20>)
 80014c8:	2300      	movs	r3, #0
 80014ca:	4604      	mov	r4, r0
 80014cc:	4608      	mov	r0, r1
 80014ce:	4611      	mov	r1, r2
 80014d0:	602b      	str	r3, [r5, #0]
 80014d2:	f7ff f812 	bl	80004fa <_fstat>
 80014d6:	1c43      	adds	r3, r0, #1
 80014d8:	d102      	bne.n	80014e0 <_fstat_r+0x1c>
 80014da:	682b      	ldr	r3, [r5, #0]
 80014dc:	b103      	cbz	r3, 80014e0 <_fstat_r+0x1c>
 80014de:	6023      	str	r3, [r4, #0]
 80014e0:	bd38      	pop	{r3, r4, r5, pc}
 80014e2:	bf00      	nop
 80014e4:	200001b8 	.word	0x200001b8

080014e8 <_isatty_r>:
 80014e8:	b538      	push	{r3, r4, r5, lr}
 80014ea:	4d06      	ldr	r5, [pc, #24]	@ (8001504 <_isatty_r+0x1c>)
 80014ec:	2300      	movs	r3, #0
 80014ee:	4604      	mov	r4, r0
 80014f0:	4608      	mov	r0, r1
 80014f2:	602b      	str	r3, [r5, #0]
 80014f4:	f7ff f811 	bl	800051a <_isatty>
 80014f8:	1c43      	adds	r3, r0, #1
 80014fa:	d102      	bne.n	8001502 <_isatty_r+0x1a>
 80014fc:	682b      	ldr	r3, [r5, #0]
 80014fe:	b103      	cbz	r3, 8001502 <_isatty_r+0x1a>
 8001500:	6023      	str	r3, [r4, #0]
 8001502:	bd38      	pop	{r3, r4, r5, pc}
 8001504:	200001b8 	.word	0x200001b8

08001508 <_sbrk_r>:
 8001508:	b538      	push	{r3, r4, r5, lr}
 800150a:	4d06      	ldr	r5, [pc, #24]	@ (8001524 <_sbrk_r+0x1c>)
 800150c:	2300      	movs	r3, #0
 800150e:	4604      	mov	r4, r0
 8001510:	4608      	mov	r0, r1
 8001512:	602b      	str	r3, [r5, #0]
 8001514:	f7ff f81a 	bl	800054c <_sbrk>
 8001518:	1c43      	adds	r3, r0, #1
 800151a:	d102      	bne.n	8001522 <_sbrk_r+0x1a>
 800151c:	682b      	ldr	r3, [r5, #0]
 800151e:	b103      	cbz	r3, 8001522 <_sbrk_r+0x1a>
 8001520:	6023      	str	r3, [r4, #0]
 8001522:	bd38      	pop	{r3, r4, r5, pc}
 8001524:	200001b8 	.word	0x200001b8

08001528 <_init>:
 8001528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800152a:	bf00      	nop
 800152c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800152e:	bc08      	pop	{r3}
 8001530:	469e      	mov	lr, r3
 8001532:	4770      	bx	lr

08001534 <_fini>:
 8001534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001536:	bf00      	nop
 8001538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800153a:	bc08      	pop	{r3}
 800153c:	469e      	mov	lr, r3
 800153e:	4770      	bx	lr
